{"errors": [], "results": [{"check_id": "go.lang.security.audit.database.string-formatted-query.string-formatted-query", "end": {"col": 47, "line": 360, "offset": 9278}, "extra": {"is_ignored": false, "lines": "\tforUpdate := \"\"\n\tif isForUpdate {\n\t\tforUpdate = \"FOR UPDATE\"\n\t}\n\n\tquery := fmt.Sprintf(\"SELECT %s%s%s FROM %s%s%s WHERE %s%s%s = ? %s\", Q, sels, Q, Q, mi.table, Q, Q, wheres, Q, forUpdate)\n\n\trefs := make([]interface{}, colsNum)\n\tfor i := range refs {\n\t\tvar ref interface{}\n\t\trefs[i] = &ref\n\t}\n\n\td.ins.ReplaceMarks(&query)\n\n\trow := q.QueryRowContext(ctx, query, args...)", "message": "String-formatted SQL query detected. This could lead to SQL injection if the string is not sanitized properly. Audit this call to ensure the SQL is not manipulable by external data.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A1: Injection", "shortlink": "https://sg.run/ydEr", "source": "https://semgrep.dev/r/go.lang.security.audit.database.string-formatted-query.string-formatted-query", "source-rule-url": "https://github.com/securego/gosec", "technology": ["go"]}, "metavars": {"$CTX": {"abstract_content": "ctx", "end": {"col": 30, "line": 360, "offset": 9261}, "start": {"col": 27, "line": 360, "offset": 9258}, "unique_id": {"sid": 67, "type": "id"}}, "$FXN": {"abstract_content": "fmt.Sprintf", "end": {"col": 22, "line": 350, "offset": 8995}, "start": {"col": 11, "line": 350, "offset": 8984}, "unique_id": {"md5sum": "4a0b321370c703b9555f8de17bc1ef75", "type": "AST"}}, "$OBJ": {"abstract_content": "q", "end": {"col": 10, "line": 360, "offset": 9241}, "start": {"col": 9, "line": 360, "offset": 9240}, "unique_id": {"sid": 68, "type": "id"}}, "$OTHER": {"abstract_content": "query", "end": {"col": 7, "line": 350, "offset": 8980}, "start": {"col": 2, "line": 350, "offset": 8975}, "unique_id": {"sid": 83, "type": "id"}}, "$QUERY": {"abstract_content": "forUpdate", "end": {"col": 11, "line": 345, "offset": 8918}, "start": {"col": 2, "line": 345, "offset": 8909}, "unique_id": {"sid": 82, "type": "id"}}}, "severity": "WARNING"}, "path": "frameworks/beego/client/orm/db.go", "start": {"col": 2, "line": 345, "offset": 8909}}, {"check_id": "go.lang.security.audit.database.string-formatted-query.string-formatted-query", "end": {"col": 3, "line": 604, "offset": 15743}, "extra": {"is_ignored": false, "lines": "\tiouStr := \"\"\n\targsMap := map[string]string{}\n\tswitch a.Driver {\n\tcase DRMySQL:\n\t\tiouStr = \"ON DUPLICATE KEY UPDATE\"\n\tcase DRPostgres:\n\t\tif len(args) == 0 {\n\t\t\treturn 0, fmt.Errorf(\"`%s` use InsertOrUpdate must have a conflict column\", a.DriverName)\n\t\t}\n\t\targs0 = strings.ToLower(args[0])\n\t\tiouStr = fmt.Sprintf(\"ON CONFLICT (%s) DO UPDATE SET\", args0)\n\tdefault:\n\t\treturn 0, fmt.Errorf(\"`%s` nonsupport InsertOrUpdate in beego\", a.DriverName)\n\t}\n\n\t// Get on the key-value pairs\n\tfor _, v := range args {\n\t\tkv := strings.Split(v, \"=\")\n\t\tif len(kv) == 2 {\n\t\t\targsMap[strings.ToLower(kv[0])] = kv[1]\n\t\t}\n\t}\n\n\tisMulti := false\n\tnames := make([]string, 0, len(mi.fields.dbcols)-1)\n\tQ := d.ins.TableQuote()\n\tvalues, _, err := d.collectValues(mi, ind, mi.fields.dbcols, true, true, &names, a.TZ)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\n\tmarks := make([]string, len(names))\n\tupdateValues := make([]interface{}, 0)\n\tupdates := make([]string, len(names))\n\tvar conflitValue interface{}\n\tfor i, v := range names {\n\t\t// identifier in database may not be case-sensitive, so quote it\n\t\tv = fmt.Sprintf(\"%s%s%s\", Q, v, Q)\n\t\tmarks[i] = \"?\"\n\t\tvalueStr := argsMap[strings.ToLower(v)]\n\t\tif v == args0 {\n\t\t\tconflitValue = values[i]\n\t\t}\n\t\tif valueStr != \"\" {\n\t\t\tswitch a.Driver {\n\t\t\tcase DRMySQL:\n\t\t\t\tupdates[i] = v + \"=\" + valueStr\n\t\t\tcase DRPostgres:\n\t\t\t\tif conflitValue != nil {\n\t\t\t\t\t// postgres ON CONFLICT DO UPDATE SET can`t use colu=colu+values\n\t\t\t\t\tupdates[i] = fmt.Sprintf(\"%s=(select %s from %s where %s = ? )\", v, valueStr, mi.table, args0)\n\t\t\t\t\tupdateValues = append(updateValues, conflitValue)\n\t\t\t\t} else {\n\t\t\t\t\treturn 0, fmt.Errorf(\"`%s` must be in front of `%s` in your struct\", args0, v)\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tupdates[i] = v + \"=?\"\n\t\t\tupdateValues = append(updateValues, values[i])\n\t\t}\n\t}\n\n\tvalues = append(values, updateValues...)\n\n\tsep := fmt.Sprintf(\"%s, %s\", Q, Q)\n\tqmarks := strings.Join(marks, \", \")\n\tqupdates := strings.Join(updates, \", \")\n\tcolumns := strings.Join(names, sep)\n\n\tmulti := len(values) / len(names)\n\n\tif isMulti {\n\t\tqmarks = strings.Repeat(qmarks+\"), (\", multi-1) + qmarks\n\t}\n\t// conflitValue maybe is a int,can`t use fmt.Sprintf\n\tquery := fmt.Sprintf(\"INSERT INTO %s%s%s (%s%s%s) VALUES (%s) %s \"+qupdates, Q, mi.table, Q, Q, columns, Q, qmarks, iouStr)\n\n\td.ins.ReplaceMarks(&query)\n\n\tif isMulti || !d.ins.HasReturningID(mi, &query) {\n\t\tres, err := q.ExecContext(ctx, query, values...)\n\t\tif err == nil {\n\t\t\tif isMulti {\n\t\t\t\treturn res.RowsAffected()\n\t\t\t}\n\n\t\t\tlastInsertId, err := res.LastInsertId()\n\t\t\tif err != nil {\n\t\t\t\tDebugLog.Println(ErrLastInsertIdUnavailable, ':', err)\n\t\t\t\treturn lastInsertId, ErrLastInsertIdUnavailable\n\t\t\t} else {\n\t\t\t\treturn lastInsertId, nil\n\t\t\t}\n\t\t}\n\t\treturn 0, err\n\t}", "message": "String-formatted SQL query detected. This could lead to SQL injection if the string is not sanitized properly. Audit this call to ensure the SQL is not manipulable by external data.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A1: Injection", "shortlink": "https://sg.run/ydEr", "source": "https://semgrep.dev/r/go.lang.security.audit.database.string-formatted-query.string-formatted-query", "source-rule-url": "https://github.com/securego/gosec", "technology": ["go"]}, "metavars": {"$CTX": {"abstract_content": "ctx", "end": {"col": 32, "line": 589, "offset": 15412}, "start": {"col": 29, "line": 589, "offset": 15409}, "unique_id": {"sid": 129, "type": "id"}}, "$FXN": {"abstract_content": "fmt.Sprintf", "end": {"col": 22, "line": 584, "offset": 15196}, "start": {"col": 11, "line": 584, "offset": 15185}, "unique_id": {"md5sum": "4a0b321370c703b9555f8de17bc1ef75", "type": "AST"}}, "$OBJ": {"abstract_content": "q", "end": {"col": 16, "line": 589, "offset": 15396}, "start": {"col": 15, "line": 589, "offset": 15395}, "unique_id": {"sid": 130, "type": "id"}}, "$OTHER": {"abstract_content": "query", "end": {"col": 7, "line": 584, "offset": 15181}, "start": {"col": 2, "line": 584, "offset": 15176}, "unique_id": {"sid": 159, "type": "id"}}, "$QUERY": {"abstract_content": "iouStr", "end": {"col": 8, "line": 509, "offset": 13037}, "start": {"col": 2, "line": 509, "offset": 13031}, "unique_id": {"sid": 135, "type": "id"}}}, "severity": "WARNING"}, "path": "frameworks/beego/client/orm/db.go", "start": {"col": 2, "line": 509, "offset": 13031}}, {"check_id": "go.lang.security.audit.database.string-formatted-query.string-formatted-query", "end": {"col": 49, "line": 606, "offset": 15793}, "extra": {"is_ignored": false, "lines": "\tiouStr := \"\"\n\targsMap := map[string]string{}\n\tswitch a.Driver {\n\tcase DRMySQL:\n\t\tiouStr = \"ON DUPLICATE KEY UPDATE\"\n\tcase DRPostgres:\n\t\tif len(args) == 0 {\n\t\t\treturn 0, fmt.Errorf(\"`%s` use InsertOrUpdate must have a conflict column\", a.DriverName)\n\t\t}\n\t\targs0 = strings.ToLower(args[0])\n\t\tiouStr = fmt.Sprintf(\"ON CONFLICT (%s) DO UPDATE SET\", args0)\n\tdefault:\n\t\treturn 0, fmt.Errorf(\"`%s` nonsupport InsertOrUpdate in beego\", a.DriverName)\n\t}\n\n\t// Get on the key-value pairs\n\tfor _, v := range args {\n\t\tkv := strings.Split(v, \"=\")\n\t\tif len(kv) == 2 {\n\t\t\targsMap[strings.ToLower(kv[0])] = kv[1]\n\t\t}\n\t}\n\n\tisMulti := false\n\tnames := make([]string, 0, len(mi.fields.dbcols)-1)\n\tQ := d.ins.TableQuote()\n\tvalues, _, err := d.collectValues(mi, ind, mi.fields.dbcols, true, true, &names, a.TZ)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\n\tmarks := make([]string, len(names))\n\tupdateValues := make([]interface{}, 0)\n\tupdates := make([]string, len(names))\n\tvar conflitValue interface{}\n\tfor i, v := range names {\n\t\t// identifier in database may not be case-sensitive, so quote it\n\t\tv = fmt.Sprintf(\"%s%s%s\", Q, v, Q)\n\t\tmarks[i] = \"?\"\n\t\tvalueStr := argsMap[strings.ToLower(v)]\n\t\tif v == args0 {\n\t\t\tconflitValue = values[i]\n\t\t}\n\t\tif valueStr != \"\" {\n\t\t\tswitch a.Driver {\n\t\t\tcase DRMySQL:\n\t\t\t\tupdates[i] = v + \"=\" + valueStr\n\t\t\tcase DRPostgres:\n\t\t\t\tif conflitValue != nil {\n\t\t\t\t\t// postgres ON CONFLICT DO UPDATE SET can`t use colu=colu+values\n\t\t\t\t\tupdates[i] = fmt.Sprintf(\"%s=(select %s from %s where %s = ? )\", v, valueStr, mi.table, args0)\n\t\t\t\t\tupdateValues = append(updateValues, conflitValue)\n\t\t\t\t} else {\n\t\t\t\t\treturn 0, fmt.Errorf(\"`%s` must be in front of `%s` in your struct\", args0, v)\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tupdates[i] = v + \"=?\"\n\t\t\tupdateValues = append(updateValues, values[i])\n\t\t}\n\t}\n\n\tvalues = append(values, updateValues...)\n\n\tsep := fmt.Sprintf(\"%s, %s\", Q, Q)\n\tqmarks := strings.Join(marks, \", \")\n\tqupdates := strings.Join(updates, \", \")\n\tcolumns := strings.Join(names, sep)\n\n\tmulti := len(values) / len(names)\n\n\tif isMulti {\n\t\tqmarks = strings.Repeat(qmarks+\"), (\", multi-1) + qmarks\n\t}\n\t// conflitValue maybe is a int,can`t use fmt.Sprintf\n\tquery := fmt.Sprintf(\"INSERT INTO %s%s%s (%s%s%s) VALUES (%s) %s \"+qupdates, Q, mi.table, Q, Q, columns, Q, qmarks, iouStr)\n\n\td.ins.ReplaceMarks(&query)\n\n\tif isMulti || !d.ins.HasReturningID(mi, &query) {\n\t\tres, err := q.ExecContext(ctx, query, values...)\n\t\tif err == nil {\n\t\t\tif isMulti {\n\t\t\t\treturn res.RowsAffected()\n\t\t\t}\n\n\t\t\tlastInsertId, err := res.LastInsertId()\n\t\t\tif err != nil {\n\t\t\t\tDebugLog.Println(ErrLastInsertIdUnavailable, ':', err)\n\t\t\t\treturn lastInsertId, ErrLastInsertIdUnavailable\n\t\t\t} else {\n\t\t\t\treturn lastInsertId, nil\n\t\t\t}\n\t\t}\n\t\treturn 0, err\n\t}\n\n\trow := q.QueryRowContext(ctx, query, values...)", "message": "String-formatted SQL query detected. This could lead to SQL injection if the string is not sanitized properly. Audit this call to ensure the SQL is not manipulable by external data.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A1: Injection", "shortlink": "https://sg.run/ydEr", "source": "https://semgrep.dev/r/go.lang.security.audit.database.string-formatted-query.string-formatted-query", "source-rule-url": "https://github.com/securego/gosec", "technology": ["go"]}, "metavars": {"$CTX": {"abstract_content": "ctx", "end": {"col": 30, "line": 606, "offset": 15774}, "start": {"col": 27, "line": 606, "offset": 15771}, "unique_id": {"sid": 129, "type": "id"}}, "$FXN": {"abstract_content": "fmt.Sprintf", "end": {"col": 22, "line": 584, "offset": 15196}, "start": {"col": 11, "line": 584, "offset": 15185}, "unique_id": {"md5sum": "4a0b321370c703b9555f8de17bc1ef75", "type": "AST"}}, "$OBJ": {"abstract_content": "q", "end": {"col": 10, "line": 606, "offset": 15754}, "start": {"col": 9, "line": 606, "offset": 15753}, "unique_id": {"sid": 130, "type": "id"}}, "$OTHER": {"abstract_content": "query", "end": {"col": 7, "line": 584, "offset": 15181}, "start": {"col": 2, "line": 584, "offset": 15176}, "unique_id": {"sid": 159, "type": "id"}}, "$QUERY": {"abstract_content": "iouStr", "end": {"col": 8, "line": 509, "offset": 13037}, "start": {"col": 2, "line": 509, "offset": 13031}, "unique_id": {"sid": 135, "type": "id"}}}, "severity": "WARNING"}, "path": "frameworks/beego/client/orm/db.go", "start": {"col": 2, "line": 509, "offset": 13031}}, {"check_id": "go.lang.security.audit.database.string-formatted-query.string-formatted-query", "end": {"col": 48, "line": 1032, "offset": 26864}, "extra": {"is_ignored": false, "lines": "\tsqlSelect := \"SELECT\"\n\tif qs.distinct {\n\t\tsqlSelect += \" DISTINCT\"\n\t}\n\tif qs.aggregate != \"\" {\n\t\tsels = qs.aggregate\n\t}\n\tquery := fmt.Sprintf(\"%s %s FROM %s%s%s T0 %s%s%s%s%s%s\",\n\t\tsqlSelect, sels, Q, mi.table, Q,\n\t\tspecifyIndexes, join, where, groupBy, orderBy, limit)\n\n\tif qs.forUpdate {\n\t\tquery += \" FOR UPDATE\"\n\t}\n\n\td.ins.ReplaceMarks(&query)\n\n\trs, err := q.QueryContext(ctx, query, args...)", "message": "String-formatted SQL query detected. This could lead to SQL injection if the string is not sanitized properly. Audit this call to ensure the SQL is not manipulable by external data.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A1: Injection", "shortlink": "https://sg.run/ydEr", "source": "https://semgrep.dev/r/go.lang.security.audit.database.string-formatted-query.string-formatted-query", "source-rule-url": "https://github.com/securego/gosec", "technology": ["go"]}, "metavars": {"$CTX": {"abstract_content": "ctx", "end": {"col": 31, "line": 1032, "offset": 26847}, "start": {"col": 28, "line": 1032, "offset": 26844}, "unique_id": {"sid": 260, "type": "id"}}, "$FXN": {"abstract_content": "fmt.Sprintf", "end": {"col": 22, "line": 1022, "offset": 26610}, "start": {"col": 11, "line": 1022, "offset": 26599}, "unique_id": {"md5sum": "4a0b321370c703b9555f8de17bc1ef75", "type": "AST"}}, "$OBJ": {"abstract_content": "q", "end": {"col": 14, "line": 1032, "offset": 26830}, "start": {"col": 13, "line": 1032, "offset": 26829}, "unique_id": {"sid": 261, "type": "id"}}, "$OTHER": {"abstract_content": "query", "end": {"col": 7, "line": 1022, "offset": 26595}, "start": {"col": 2, "line": 1022, "offset": 26590}, "unique_id": {"sid": 299, "type": "id"}}, "$QUERY": {"abstract_content": "sqlSelect", "end": {"col": 11, "line": 1015, "offset": 26478}, "start": {"col": 2, "line": 1015, "offset": 26469}, "unique_id": {"sid": 298, "type": "id"}}}, "severity": "WARNING"}, "path": "frameworks/beego/client/orm/db.go", "start": {"col": 2, "line": 1015, "offset": 26469}}, {"check_id": "go.lang.security.audit.database.string-formatted-query.string-formatted-query", "end": {"col": 48, "line": 1701, "offset": 43257}, "extra": {"is_ignored": false, "lines": "\tsqlSelect := \"SELECT\"\n\tif qs.distinct {\n\t\tsqlSelect += \" DISTINCT\"\n\t}\n\tquery := fmt.Sprintf(\"%s %s FROM %s%s%s T0 %s%s%s%s%s%s\",\n\t\tsqlSelect, sels,\n\t\tQ, mi.table, Q,\n\t\tspecifyIndexes, join, where, groupBy, orderBy, limit)\n\n\td.ins.ReplaceMarks(&query)\n\n\trs, err := q.QueryContext(ctx, query, args...)", "message": "String-formatted SQL query detected. This could lead to SQL injection if the string is not sanitized properly. Audit this call to ensure the SQL is not manipulable by external data.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A1: Injection", "shortlink": "https://sg.run/ydEr", "source": "https://semgrep.dev/r/go.lang.security.audit.database.string-formatted-query.string-formatted-query", "source-rule-url": "https://github.com/securego/gosec", "technology": ["go"]}, "metavars": {"$CTX": {"abstract_content": "ctx", "end": {"col": 31, "line": 1701, "offset": 43240}, "start": {"col": 28, "line": 1701, "offset": 43237}, "unique_id": {"sid": 411, "type": "id"}}, "$FXN": {"abstract_content": "fmt.Sprintf", "end": {"col": 22, "line": 1694, "offset": 43049}, "start": {"col": 11, "line": 1694, "offset": 43038}, "unique_id": {"md5sum": "4a0b321370c703b9555f8de17bc1ef75", "type": "AST"}}, "$OBJ": {"abstract_content": "q", "end": {"col": 14, "line": 1701, "offset": 43223}, "start": {"col": 13, "line": 1701, "offset": 43222}, "unique_id": {"sid": 412, "type": "id"}}, "$OTHER": {"abstract_content": "query", "end": {"col": 7, "line": 1694, "offset": 43034}, "start": {"col": 2, "line": 1694, "offset": 43029}, "unique_id": {"sid": 442, "type": "id"}}, "$QUERY": {"abstract_content": "sqlSelect", "end": {"col": 11, "line": 1690, "offset": 42967}, "start": {"col": 2, "line": 1690, "offset": 42958}, "unique_id": {"sid": 441, "type": "id"}}}, "severity": "WARNING"}, "path": "frameworks/beego/client/orm/db.go", "start": {"col": 2, "line": 1690, "offset": 42958}}, {"check_id": "go.lang.security.audit.database.string-formatted-query.string-formatted-query", "end": {"col": 3, "line": 179, "offset": 5269}, "extra": {"is_ignored": false, "lines": "\tiouStr = \"ON DUPLICATE KEY UPDATE\"\n\n\t// Get on the key-value pairs\n\tfor _, v := range args {\n\t\tkv := strings.Split(v, \"=\")\n\t\tif len(kv) == 2 {\n\t\t\targsMap[strings.ToLower(kv[0])] = kv[1]\n\t\t}\n\t}\n\n\tisMulti := false\n\tnames := make([]string, 0, len(mi.fields.dbcols)-1)\n\tQ := d.ins.TableQuote()\n\tvalues, _, err := d.collectValues(mi, ind, mi.fields.dbcols, true, true, &names, a.TZ)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\n\tmarks := make([]string, len(names))\n\tupdateValues := make([]interface{}, 0)\n\tupdates := make([]string, len(names))\n\n\tfor i, v := range names {\n\t\tmarks[i] = \"?\"\n\t\tvalueStr := argsMap[strings.ToLower(v)]\n\t\tif valueStr != \"\" {\n\t\t\tupdates[i] = \"`\" + v + \"`\" + \"=\" + valueStr\n\t\t} else {\n\t\t\tupdates[i] = \"`\" + v + \"`\" + \"=?\"\n\t\t\tupdateValues = append(updateValues, values[i])\n\t\t}\n\t}\n\n\tvalues = append(values, updateValues...)\n\n\tsep := fmt.Sprintf(\"%s, %s\", Q, Q)\n\tqmarks := strings.Join(marks, \", \")\n\tqupdates := strings.Join(updates, \", \")\n\tcolumns := strings.Join(names, sep)\n\n\tmulti := len(values) / len(names)\n\n\tif isMulti {\n\t\tqmarks = strings.Repeat(qmarks+\"), (\", multi-1) + qmarks\n\t}\n\t// conflitValue maybe is a int,can`t use fmt.Sprintf\n\tquery := fmt.Sprintf(\"INSERT INTO %s%s%s (%s%s%s) VALUES (%s) %s \"+qupdates, Q, mi.table, Q, Q, columns, Q, qmarks, iouStr)\n\n\td.ins.ReplaceMarks(&query)\n\n\tif isMulti || !d.ins.HasReturningID(mi, &query) {\n\t\tres, err := q.ExecContext(ctx, query, values...)\n\t\tif err == nil {\n\t\t\tif isMulti {\n\t\t\t\treturn res.RowsAffected()\n\t\t\t}\n\n\t\t\tlastInsertId, err := res.LastInsertId()\n\t\t\tif err != nil {\n\t\t\t\tDebugLog.Println(ErrLastInsertIdUnavailable, ':', err)\n\t\t\t\treturn lastInsertId, ErrLastInsertIdUnavailable\n\t\t\t} else {\n\t\t\t\treturn lastInsertId, nil\n\t\t\t}\n\t\t}\n\t\treturn 0, err\n\t}", "message": "String-formatted SQL query detected. This could lead to SQL injection if the string is not sanitized properly. Audit this call to ensure the SQL is not manipulable by external data.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A1: Injection", "shortlink": "https://sg.run/ydEr", "source": "https://semgrep.dev/r/go.lang.security.audit.database.string-formatted-query.string-formatted-query", "source-rule-url": "https://github.com/securego/gosec", "technology": ["go"]}, "metavars": {"$CTX": {"abstract_content": "ctx", "end": {"col": 32, "line": 164, "offset": 4938}, "start": {"col": 29, "line": 164, "offset": 4935}, "unique_id": {"sid": 12, "type": "id"}}, "$FXN": {"abstract_content": "fmt.Sprintf", "end": {"col": 22, "line": 159, "offset": 4722}, "start": {"col": 11, "line": 159, "offset": 4711}, "unique_id": {"md5sum": "4a0b321370c703b9555f8de17bc1ef75", "type": "AST"}}, "$OBJ": {"abstract_content": "q", "end": {"col": 16, "line": 164, "offset": 4922}, "start": {"col": 15, "line": 164, "offset": 4921}, "unique_id": {"sid": 13, "type": "id"}}, "$OTHER": {"abstract_content": "query", "end": {"col": 7, "line": 159, "offset": 4707}, "start": {"col": 2, "line": 159, "offset": 4702}, "unique_id": {"sid": 36, "type": "id"}}, "$QUERY": {"abstract_content": "iouStr", "end": {"col": 8, "line": 113, "offset": 3553}, "start": {"col": 2, "line": 113, "offset": 3547}, "unique_id": {"sid": 17, "type": "id"}}}, "severity": "WARNING"}, "path": "frameworks/beego/client/orm/db_mysql.go", "start": {"col": 2, "line": 113, "offset": 3547}}, {"check_id": "go.lang.security.audit.database.string-formatted-query.string-formatted-query", "end": {"col": 49, "line": 181, "offset": 5319}, "extra": {"is_ignored": false, "lines": "\tiouStr = \"ON DUPLICATE KEY UPDATE\"\n\n\t// Get on the key-value pairs\n\tfor _, v := range args {\n\t\tkv := strings.Split(v, \"=\")\n\t\tif len(kv) == 2 {\n\t\t\targsMap[strings.ToLower(kv[0])] = kv[1]\n\t\t}\n\t}\n\n\tisMulti := false\n\tnames := make([]string, 0, len(mi.fields.dbcols)-1)\n\tQ := d.ins.TableQuote()\n\tvalues, _, err := d.collectValues(mi, ind, mi.fields.dbcols, true, true, &names, a.TZ)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\n\tmarks := make([]string, len(names))\n\tupdateValues := make([]interface{}, 0)\n\tupdates := make([]string, len(names))\n\n\tfor i, v := range names {\n\t\tmarks[i] = \"?\"\n\t\tvalueStr := argsMap[strings.ToLower(v)]\n\t\tif valueStr != \"\" {\n\t\t\tupdates[i] = \"`\" + v + \"`\" + \"=\" + valueStr\n\t\t} else {\n\t\t\tupdates[i] = \"`\" + v + \"`\" + \"=?\"\n\t\t\tupdateValues = append(updateValues, values[i])\n\t\t}\n\t}\n\n\tvalues = append(values, updateValues...)\n\n\tsep := fmt.Sprintf(\"%s, %s\", Q, Q)\n\tqmarks := strings.Join(marks, \", \")\n\tqupdates := strings.Join(updates, \", \")\n\tcolumns := strings.Join(names, sep)\n\n\tmulti := len(values) / len(names)\n\n\tif isMulti {\n\t\tqmarks = strings.Repeat(qmarks+\"), (\", multi-1) + qmarks\n\t}\n\t// conflitValue maybe is a int,can`t use fmt.Sprintf\n\tquery := fmt.Sprintf(\"INSERT INTO %s%s%s (%s%s%s) VALUES (%s) %s \"+qupdates, Q, mi.table, Q, Q, columns, Q, qmarks, iouStr)\n\n\td.ins.ReplaceMarks(&query)\n\n\tif isMulti || !d.ins.HasReturningID(mi, &query) {\n\t\tres, err := q.ExecContext(ctx, query, values...)\n\t\tif err == nil {\n\t\t\tif isMulti {\n\t\t\t\treturn res.RowsAffected()\n\t\t\t}\n\n\t\t\tlastInsertId, err := res.LastInsertId()\n\t\t\tif err != nil {\n\t\t\t\tDebugLog.Println(ErrLastInsertIdUnavailable, ':', err)\n\t\t\t\treturn lastInsertId, ErrLastInsertIdUnavailable\n\t\t\t} else {\n\t\t\t\treturn lastInsertId, nil\n\t\t\t}\n\t\t}\n\t\treturn 0, err\n\t}\n\n\trow := q.QueryRowContext(ctx, query, values...)", "message": "String-formatted SQL query detected. This could lead to SQL injection if the string is not sanitized properly. Audit this call to ensure the SQL is not manipulable by external data.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A1: Injection", "shortlink": "https://sg.run/ydEr", "source": "https://semgrep.dev/r/go.lang.security.audit.database.string-formatted-query.string-formatted-query", "source-rule-url": "https://github.com/securego/gosec", "technology": ["go"]}, "metavars": {"$CTX": {"abstract_content": "ctx", "end": {"col": 30, "line": 181, "offset": 5300}, "start": {"col": 27, "line": 181, "offset": 5297}, "unique_id": {"sid": 12, "type": "id"}}, "$FXN": {"abstract_content": "fmt.Sprintf", "end": {"col": 22, "line": 159, "offset": 4722}, "start": {"col": 11, "line": 159, "offset": 4711}, "unique_id": {"md5sum": "4a0b321370c703b9555f8de17bc1ef75", "type": "AST"}}, "$OBJ": {"abstract_content": "q", "end": {"col": 10, "line": 181, "offset": 5280}, "start": {"col": 9, "line": 181, "offset": 5279}, "unique_id": {"sid": 13, "type": "id"}}, "$OTHER": {"abstract_content": "query", "end": {"col": 7, "line": 159, "offset": 4707}, "start": {"col": 2, "line": 159, "offset": 4702}, "unique_id": {"sid": 36, "type": "id"}}, "$QUERY": {"abstract_content": "iouStr", "end": {"col": 8, "line": 113, "offset": 3553}, "start": {"col": 2, "line": 113, "offset": 3547}, "unique_id": {"sid": 17, "type": "id"}}}, "severity": "WARNING"}, "path": "frameworks/beego/client/orm/db_mysql.go", "start": {"col": 2, "line": 113, "offset": 3547}}, {"check_id": "go.lang.security.audit.database.string-formatted-query.string-formatted-query", "end": {"col": 43, "line": 47, "offset": 1527}, "extra": {"is_ignored": false, "lines": "\t\treturn ctx.Input.Query(\":\" + param.name)", "message": "String-formatted SQL query detected. This could lead to SQL injection if the string is not sanitized properly. Audit this call to ensure the SQL is not manipulable by external data.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A1: Injection", "shortlink": "https://sg.run/ydEr", "source": "https://semgrep.dev/r/go.lang.security.audit.database.string-formatted-query.string-formatted-query", "source-rule-url": "https://github.com/securego/gosec", "technology": ["go"]}, "metavars": {"$OBJ": {"abstract_content": "ctx.Input", "end": {"col": 19, "line": 47, "offset": 1503}, "start": {"col": 10, "line": 47, "offset": 1494}, "unique_id": {"md5sum": "63b17a568985ef8379fa7cddc8422aeb", "type": "AST"}}, "$X": {"abstract_content": "\":\"", "end": {"col": 29, "line": 47, "offset": 1513}, "start": {"col": 26, "line": 47, "offset": 1510}, "unique_id": {"md5sum": "6c54cf8dab1cd6d81276da0d47947251", "type": "AST"}}}, "severity": "WARNING"}, "path": "frameworks/beego/server/web/context/param/conv.go", "start": {"col": 10, "line": 47, "offset": 1494}}, {"check_id": "go.lang.security.audit.database.string-formatted-query.string-formatted-query", "end": {"col": 63, "line": 232, "offset": 6539}, "extra": {"is_ignored": false, "lines": "\terr := c.QueryRow(\"SELECT count(*) as num from \" + TableName).Scan(&total)", "message": "String-formatted SQL query detected. This could lead to SQL injection if the string is not sanitized properly. Audit this call to ensure the SQL is not manipulable by external data.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A1: Injection", "shortlink": "https://sg.run/ydEr", "source": "https://semgrep.dev/r/go.lang.security.audit.database.string-formatted-query.string-formatted-query", "source-rule-url": "https://github.com/securego/gosec", "technology": ["go"]}, "metavars": {"$OBJ": {"abstract_content": "c", "end": {"col": 10, "line": 232, "offset": 6486}, "start": {"col": 9, "line": 232, "offset": 6485}, "unique_id": {"sid": 49, "type": "id"}}, "$X": {"abstract_content": "\"SELECT count(*) as num from \"", "end": {"col": 50, "line": 232, "offset": 6526}, "start": {"col": 20, "line": 232, "offset": 6496}, "unique_id": {"md5sum": "cd27b18112a36b961ba51b3ade10c8d9", "type": "AST"}}}, "severity": "WARNING"}, "path": "frameworks/beego/server/web/session/mysql/sess_mysql.go", "start": {"col": 9, "line": 232, "offset": 6485}}, {"check_id": "go.lang.security.audit.crypto.missing-ssl-minversion.missing-ssl-minversion", "end": {"col": 3, "line": 97, "offset": 2666}, "extra": {"fix_regex": {"regex": "Config\\s*\\{", "replacement": "Config{MinVersion: SSL.VersionTLS13,"}, "is_ignored": false, "lines": "\ttlsConn := &tls.Config{\n\t\tInsecureSkipVerify: true,\n\t\tServerName:         host,\n\t}", "message": "`MinVersion` is missing from this TLS configuration. The default value is TLS1.0 which is considered insecure. Explicitly set the `MinVersion` to a secure version of TLS, such as `VersionTLS13`.", "metadata": {"category": "security", "confidence": "HIGH", "cwe": "CWE-327: Use of a Broken or Risky Cryptographic Algorithm", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A9: Using Components with Known Vulnerabilities", "references": ["https://golang.org/doc/go1.14#crypto/tls", "https://golang.org/pkg/crypto/tls/#:~:text=MinVersion", "https://www.us-cert.gov/ncas/alerts/TA14-290A"], "shortlink": "https://sg.run/oxEN", "source": "https://semgrep.dev/r/go.lang.security.audit.crypto.missing-ssl-minversion.missing-ssl-minversion", "source-rule-url": "https://github.com/securego/gosec/blob/master/rules/tls_config.go", "technology": ["go"]}, "metavars": {}, "severity": "WARNING"}, "path": "frameworks/beego/core/logs/smtp.go", "start": {"col": 14, "line": 94, "offset": 2596}}, {"check_id": "go.lang.security.audit.crypto.missing-ssl-minversion.missing-ssl-minversion", "end": {"col": 32, "line": 104, "offset": 2575}, "extra": {"fix_regex": {"regex": "Config\\s*\\{", "replacement": "Config{MinVersion: SSL.VersionTLS13,"}, "is_ignored": false, "lines": "\t\tsrv.TLSConfig = &tls.Config{}", "message": "`MinVersion` is missing from this TLS configuration. The default value is TLS1.0 which is considered insecure. Explicitly set the `MinVersion` to a secure version of TLS, such as `VersionTLS13`.", "metadata": {"category": "security", "confidence": "HIGH", "cwe": "CWE-327: Use of a Broken or Risky Cryptographic Algorithm", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A9: Using Components with Known Vulnerabilities", "references": ["https://golang.org/doc/go1.14#crypto/tls", "https://golang.org/pkg/crypto/tls/#:~:text=MinVersion", "https://www.us-cert.gov/ncas/alerts/TA14-290A"], "shortlink": "https://sg.run/oxEN", "source": "https://semgrep.dev/r/go.lang.security.audit.crypto.missing-ssl-minversion.missing-ssl-minversion", "source-rule-url": "https://github.com/securego/gosec/blob/master/rules/tls_config.go", "technology": ["go"]}, "metavars": {}, "severity": "WARNING"}, "path": "frameworks/beego/server/web/grace/server.go", "start": {"col": 20, "line": 104, "offset": 2563}}, {"check_id": "go.lang.security.audit.crypto.missing-ssl-minversion.missing-ssl-minversion", "end": {"col": 32, "line": 150, "offset": 3652}, "extra": {"fix_regex": {"regex": "Config\\s*\\{", "replacement": "Config{MinVersion: SSL.VersionTLS13,"}, "is_ignored": false, "lines": "\t\tsrv.TLSConfig = &tls.Config{}", "message": "`MinVersion` is missing from this TLS configuration. The default value is TLS1.0 which is considered insecure. Explicitly set the `MinVersion` to a secure version of TLS, such as `VersionTLS13`.", "metadata": {"category": "security", "confidence": "HIGH", "cwe": "CWE-327: Use of a Broken or Risky Cryptographic Algorithm", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A9: Using Components with Known Vulnerabilities", "references": ["https://golang.org/doc/go1.14#crypto/tls", "https://golang.org/pkg/crypto/tls/#:~:text=MinVersion", "https://www.us-cert.gov/ncas/alerts/TA14-290A"], "shortlink": "https://sg.run/oxEN", "source": "https://semgrep.dev/r/go.lang.security.audit.crypto.missing-ssl-minversion.missing-ssl-minversion", "source-rule-url": "https://github.com/securego/gosec/blob/master/rules/tls_config.go", "technology": ["go"]}, "metavars": {}, "severity": "WARNING"}, "path": "frameworks/beego/server/web/grace/server.go", "start": {"col": 20, "line": 150, "offset": 3640}}, {"check_id": "go.lang.security.audit.crypto.missing-ssl-minversion.missing-ssl-minversion", "end": {"col": 75, "line": 166, "offset": 4748}, "extra": {"fix_regex": {"regex": "Config\\s*\\{", "replacement": "Config{MinVersion: SSL.VersionTLS13,"}, "is_ignored": false, "lines": "\t\t\t\t\t\tapp.Server.TLSConfig = &tls.Config{GetCertificate: m.GetCertificate}", "message": "`MinVersion` is missing from this TLS configuration. The default value is TLS1.0 which is considered insecure. Explicitly set the `MinVersion` to a secure version of TLS, such as `VersionTLS13`.", "metadata": {"category": "security", "confidence": "HIGH", "cwe": "CWE-327: Use of a Broken or Risky Cryptographic Algorithm", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A9: Using Components with Known Vulnerabilities", "references": ["https://golang.org/doc/go1.14#crypto/tls", "https://golang.org/pkg/crypto/tls/#:~:text=MinVersion", "https://www.us-cert.gov/ncas/alerts/TA14-290A"], "shortlink": "https://sg.run/oxEN", "source": "https://semgrep.dev/r/go.lang.security.audit.crypto.missing-ssl-minversion.missing-ssl-minversion", "source-rule-url": "https://github.com/securego/gosec/blob/master/rules/tls_config.go", "technology": ["go"]}, "metavars": {}, "severity": "WARNING"}, "path": "frameworks/beego/server/web/server.go", "start": {"col": 31, "line": 166, "offset": 4704}}, {"check_id": "go.lang.security.audit.crypto.missing-ssl-minversion.missing-ssl-minversion", "end": {"col": 73, "line": 213, "offset": 6424}, "extra": {"fix_regex": {"regex": "Config\\s*\\{", "replacement": "Config{MinVersion: SSL.VersionTLS13,"}, "is_ignored": false, "lines": "\t\t\t\tapp.Server.TLSConfig = &tls.Config{GetCertificate: m.GetCertificate}", "message": "`MinVersion` is missing from this TLS configuration. The default value is TLS1.0 which is considered insecure. Explicitly set the `MinVersion` to a secure version of TLS, such as `VersionTLS13`.", "metadata": {"category": "security", "confidence": "HIGH", "cwe": "CWE-327: Use of a Broken or Risky Cryptographic Algorithm", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A9: Using Components with Known Vulnerabilities", "references": ["https://golang.org/doc/go1.14#crypto/tls", "https://golang.org/pkg/crypto/tls/#:~:text=MinVersion", "https://www.us-cert.gov/ncas/alerts/TA14-290A"], "shortlink": "https://sg.run/oxEN", "source": "https://semgrep.dev/r/go.lang.security.audit.crypto.missing-ssl-minversion.missing-ssl-minversion", "source-rule-url": "https://github.com/securego/gosec/blob/master/rules/tls_config.go", "technology": ["go"]}, "metavars": {}, "severity": "WARNING"}, "path": "frameworks/beego/server/web/server.go", "start": {"col": 29, "line": 213, "offset": 6380}}, {"check_id": "go.lang.security.audit.crypto.missing-ssl-minversion.missing-ssl-minversion", "end": {"col": 6, "line": 226, "offset": 6897}, "extra": {"fix_regex": {"regex": "Config\\s*\\{", "replacement": "Config{MinVersion: SSL.VersionTLS13,"}, "is_ignored": false, "lines": "\t\t\t\tapp.Server.TLSConfig = &tls.Config{\n\t\t\t\t\tClientCAs:  pool,\n\t\t\t\t\tClientAuth: tls.ClientAuthType(app.Cfg.Listen.ClientAuth),\n\t\t\t\t}", "message": "`MinVersion` is missing from this TLS configuration. The default value is TLS1.0 which is considered insecure. Explicitly set the `MinVersion` to a secure version of TLS, such as `VersionTLS13`.", "metadata": {"category": "security", "confidence": "HIGH", "cwe": "CWE-327: Use of a Broken or Risky Cryptographic Algorithm", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A9: Using Components with Known Vulnerabilities", "references": ["https://golang.org/doc/go1.14#crypto/tls", "https://golang.org/pkg/crypto/tls/#:~:text=MinVersion", "https://www.us-cert.gov/ncas/alerts/TA14-290A"], "shortlink": "https://sg.run/oxEN", "source": "https://semgrep.dev/r/go.lang.security.audit.crypto.missing-ssl-minversion.missing-ssl-minversion", "source-rule-url": "https://github.com/securego/gosec/blob/master/rules/tls_config.go", "technology": ["go"]}, "metavars": {}, "severity": "WARNING"}, "path": "frameworks/beego/server/web/server.go", "start": {"col": 29, "line": 223, "offset": 6793}}, {"check_id": "go.lang.security.audit.crypto.missing-ssl-minversion.missing-ssl-minversion", "end": {"col": 41, "line": 143, "offset": 3856}, "extra": {"fix_regex": {"regex": "Config\\s*\\{", "replacement": "Config{MinVersion: SSL.VersionTLS13,"}, "is_ignored": false, "lines": "\t\treturn &tls.Config{ServerName: d.Host}", "message": "`MinVersion` is missing from this TLS configuration. The default value is TLS1.0 which is considered insecure. Explicitly set the `MinVersion` to a secure version of TLS, such as `VersionTLS13`.", "metadata": {"category": "security", "confidence": "HIGH", "cwe": "CWE-327: Use of a Broken or Risky Cryptographic Algorithm", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A9: Using Components with Known Vulnerabilities", "references": ["https://golang.org/doc/go1.14#crypto/tls", "https://golang.org/pkg/crypto/tls/#:~:text=MinVersion", "https://www.us-cert.gov/ncas/alerts/TA14-290A"], "shortlink": "https://sg.run/oxEN", "source": "https://semgrep.dev/r/go.lang.security.audit.crypto.missing-ssl-minversion.missing-ssl-minversion", "source-rule-url": "https://github.com/securego/gosec/blob/master/rules/tls_config.go", "technology": ["go"]}, "metavars": {}, "severity": "WARNING"}, "path": "frameworks/buffalo/mail/internal/mail/smtp.go", "start": {"col": 11, "line": 143, "offset": 3826}}, {"check_id": "go.lang.security.audit.crypto.missing-ssl-minversion.missing-ssl-minversion", "end": {"col": 65, "line": 664, "offset": 16424}, "extra": {"fix_regex": {"regex": "Config\\s*\\{", "replacement": "Config{MinVersion: SSL.VersionTLS13,"}, "is_ignored": false, "lines": "\t\ta.HostClient.TLSConfig = &tls.Config{InsecureSkipVerify: true} // #nosec G402", "message": "`MinVersion` is missing from this TLS configuration. The default value is TLS1.0 which is considered insecure. Explicitly set the `MinVersion` to a secure version of TLS, such as `VersionTLS13`.", "metadata": {"category": "security", "confidence": "HIGH", "cwe": "CWE-327: Use of a Broken or Risky Cryptographic Algorithm", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A9: Using Components with Known Vulnerabilities", "references": ["https://golang.org/doc/go1.14#crypto/tls", "https://golang.org/pkg/crypto/tls/#:~:text=MinVersion", "https://www.us-cert.gov/ncas/alerts/TA14-290A"], "shortlink": "https://sg.run/oxEN", "source": "https://semgrep.dev/r/go.lang.security.audit.crypto.missing-ssl-minversion.missing-ssl-minversion", "source-rule-url": "https://github.com/securego/gosec/blob/master/rules/tls_config.go", "technology": ["go"]}, "metavars": {}, "severity": "WARNING"}, "path": "frameworks/fiber/client.go", "start": {"col": 29, "line": 664, "offset": 16388}}, {"check_id": "go.lang.security.audit.crypto.missing-ssl-minversion.missing-ssl-minversion", "end": {"col": 3, "line": 109, "offset": 2915}, "extra": {"fix_regex": {"regex": "Config\\s*\\{", "replacement": "Config{MinVersion: SSL.VersionTLS13,"}, "is_ignored": false, "lines": "\tserverTLSConf = &tls.Config{\n\t\tCertificates: []tls.Certificate{serverCert},\n\t}", "message": "`MinVersion` is missing from this TLS configuration. The default value is TLS1.0 which is considered insecure. Explicitly set the `MinVersion` to a secure version of TLS, such as `VersionTLS13`.", "metadata": {"category": "security", "confidence": "HIGH", "cwe": "CWE-327: Use of a Broken or Risky Cryptographic Algorithm", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A9: Using Components with Known Vulnerabilities", "references": ["https://golang.org/doc/go1.14#crypto/tls", "https://golang.org/pkg/crypto/tls/#:~:text=MinVersion", "https://www.us-cert.gov/ncas/alerts/TA14-290A"], "shortlink": "https://sg.run/oxEN", "source": "https://semgrep.dev/r/go.lang.security.audit.crypto.missing-ssl-minversion.missing-ssl-minversion", "source-rule-url": "https://github.com/securego/gosec/blob/master/rules/tls_config.go", "technology": ["go"]}, "metavars": {}, "severity": "WARNING"}, "path": "frameworks/fiber/internal/tlstest/tls.go", "start": {"col": 19, "line": 107, "offset": 2854}}, {"check_id": "go.lang.security.audit.crypto.missing-ssl-minversion.missing-ssl-minversion", "end": {"col": 3, "line": 115, "offset": 3046}, "extra": {"fix_regex": {"regex": "Config\\s*\\{", "replacement": "Config{MinVersion: SSL.VersionTLS13,"}, "is_ignored": false, "lines": "\tclientTLSConf = &tls.Config{\n\t\tRootCAs: certPool,\n\t}", "message": "`MinVersion` is missing from this TLS configuration. The default value is TLS1.0 which is considered insecure. Explicitly set the `MinVersion` to a secure version of TLS, such as `VersionTLS13`.", "metadata": {"category": "security", "confidence": "HIGH", "cwe": "CWE-327: Use of a Broken or Risky Cryptographic Algorithm", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A9: Using Components with Known Vulnerabilities", "references": ["https://golang.org/doc/go1.14#crypto/tls", "https://golang.org/pkg/crypto/tls/#:~:text=MinVersion", "https://www.us-cert.gov/ncas/alerts/TA14-290A"], "shortlink": "https://sg.run/oxEN", "source": "https://semgrep.dev/r/go.lang.security.audit.crypto.missing-ssl-minversion.missing-ssl-minversion", "source-rule-url": "https://github.com/securego/gosec/blob/master/rules/tls_config.go", "technology": ["go"]}, "metavars": {}, "severity": "WARNING"}, "path": "frameworks/fiber/internal/tlstest/tls.go", "start": {"col": 19, "line": 113, "offset": 3011}}, {"check_id": "go.lang.security.audit.crypto.use_of_weak_crypto.use-of-md5", "end": {"col": 16, "line": 127, "offset": 3639}, "extra": {"is_ignored": false, "lines": "\tm := md5.New()", "message": "Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": "CWE-327: Use of a Broken or Risky Cryptographic Algorithm", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A9: Using Components with Known Vulnerabilities", "shortlink": "https://sg.run/2xB5", "source": "https://semgrep.dev/r/go.lang.security.audit.crypto.use_of_weak_crypto.use-of-md5", "source-rule-url": "https://github.com/securego/gosec#available-rules", "technology": ["go"]}, "metavars": {}, "severity": "WARNING"}, "path": "frameworks/beego/client/cache/file.go", "start": {"col": 7, "line": 127, "offset": 3630}}, {"check_id": "go.lang.security.audit.crypto.use_of_weak_crypto.use-of-md5", "end": {"col": 45, "line": 26, "offset": 687}, "extra": {"is_ignored": false, "lines": "\t\tbodyMD5 := fmt.Sprintf(\"%X\", md5.Sum(body))", "message": "Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": "CWE-327: Use of a Broken or Risky Cryptographic Algorithm", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A9: Using Components with Known Vulnerabilities", "shortlink": "https://sg.run/2xB5", "source": "https://semgrep.dev/r/go.lang.security.audit.crypto.use_of_weak_crypto.use-of-md5", "source-rule-url": "https://github.com/securego/gosec#available-rules", "technology": ["go"]}, "metavars": {}, "severity": "WARNING"}, "path": "frameworks/beego/core/logs/alils/request.go", "start": {"col": 32, "line": 26, "offset": 674}}, {"check_id": "go.lang.security.audit.crypto.use_of_weak_crypto.use-of-md5", "end": {"col": 26, "line": 44, "offset": 1440}, "extra": {"is_ignored": false, "lines": "\treturn NewHash(md5.New(), space, data, 3)", "message": "Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": "CWE-327: Use of a Broken or Risky Cryptographic Algorithm", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A9: Using Components with Known Vulnerabilities", "shortlink": "https://sg.run/2xB5", "source": "https://semgrep.dev/r/go.lang.security.audit.crypto.use_of_weak_crypto.use-of-md5", "source-rule-url": "https://github.com/securego/gosec#available-rules", "technology": ["go"]}, "metavars": {}, "severity": "WARNING"}, "path": "frameworks/fiber/internal/uuid/hash.go", "start": {"col": 17, "line": 44, "offset": 1431}}, {"check_id": "go.lang.security.audit.crypto.use_of_weak_crypto.use-of-sha1", "end": {"col": 27, "line": 52, "offset": 1696}, "extra": {"is_ignored": false, "lines": "\treturn NewHash(sha1.New(), space, data, 5)", "message": "Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.", "metadata": {"category": "security", "cwe": "CWE-327: Use of a Broken or Risky Cryptographic Algorithm", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A9: Using Components with Known Vulnerabilities", "shortlink": "https://sg.run/XBYA", "source": "https://semgrep.dev/r/go.lang.security.audit.crypto.use_of_weak_crypto.use-of-sha1", "source-rule-url": "https://github.com/securego/gosec#available-rules", "technology": ["go"]}, "metavars": {}, "severity": "WARNING"}, "path": "frameworks/fiber/internal/uuid/hash.go", "start": {"col": 17, "line": 52, "offset": 1686}}, {"check_id": "go.lang.security.audit.net.use-tls.use-tls", "end": {"col": 54, "line": 378, "offset": 12444}, "extra": {"fix": "http.ListenAndServeTLS(address, certFile, keyFile, engine.Handler())", "is_ignored": false, "lines": "\terr = http.ListenAndServe(address, engine.Handler())", "message": "Found an HTTP server without TLS. Use 'http.ListenAndServeTLS' instead. See https://golang.org/pkg/net/http/#ListenAndServeTLS for more information.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": "CWE-319: Cleartext Transmission of Sensitive Information", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A3: Sensitive Data Exposure", "references": ["https://golang.org/pkg/net/http/#ListenAndServeTLS"], "shortlink": "https://sg.run/dKbY", "source": "https://semgrep.dev/r/go.lang.security.audit.net.use-tls.use-tls", "technology": ["go"]}, "metavars": {"$ADDR": {"abstract_content": "address", "end": {"col": 35, "line": 378, "offset": 12425}, "start": {"col": 28, "line": 378, "offset": 12418}, "unique_id": {"sid": 70, "type": "id"}}, "$HANDLER": {"abstract_content": "engine.Handler()", "end": {"col": 53, "line": 378, "offset": 12443}, "start": {"col": 37, "line": 378, "offset": 12427}, "unique_id": {"md5sum": "d634c68395c8ee9391a446680ef6bf4a", "type": "AST"}}}, "severity": "WARNING"}, "path": "frameworks/gin/gin.go", "start": {"col": 8, "line": 378, "offset": 12398}}, {"check_id": "go.lang.security.audit.net.use-tls.use-tls", "end": {"col": 47, "line": 147, "offset": 3504}, "extra": {"fix": "http.ListenAndServeTLS(this.Address, certFile, keyFile, nil)", "is_ignored": false, "lines": "\treturn http.ListenAndServe(this.Address, nil)", "message": "Found an HTTP server without TLS. Use 'http.ListenAndServeTLS' instead. See https://golang.org/pkg/net/http/#ListenAndServeTLS for more information.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": "CWE-319: Cleartext Transmission of Sensitive Information", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A3: Sensitive Data Exposure", "references": ["https://golang.org/pkg/net/http/#ListenAndServeTLS"], "shortlink": "https://sg.run/dKbY", "source": "https://semgrep.dev/r/go.lang.security.audit.net.use-tls.use-tls", "technology": ["go"]}, "metavars": {"$ADDR": {"abstract_content": "this.Address", "end": {"col": 41, "line": 147, "offset": 3498}, "start": {"col": 29, "line": 147, "offset": 3486}, "unique_id": {"md5sum": "395fd44e4646e7a3837e67e1dd4df890", "type": "AST"}}, "$HANDLER": {"abstract_content": "nil", "end": {"col": 46, "line": 147, "offset": 3503}, "start": {"col": 43, "line": 147, "offset": 3500}, "unique_id": {"md5sum": "9e83c5aeae9f8030e4ce167b92579bba", "type": "AST"}}}, "severity": "WARNING"}, "path": "frameworks/mango/mango.go", "start": {"col": 9, "line": 147, "offset": 3466}}, {"check_id": "go.lang.security.audit.net.use-tls.use-tls", "end": {"col": 45, "line": 86, "offset": 2750}, "extra": {"fix": "http.ListenAndServeTLS(addr, certFile, keyFile, m)", "is_ignored": false, "lines": "\tlogger.Fatalln(http.ListenAndServe(addr, m))", "message": "Found an HTTP server without TLS. Use 'http.ListenAndServeTLS' instead. See https://golang.org/pkg/net/http/#ListenAndServeTLS for more information.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": "CWE-319: Cleartext Transmission of Sensitive Information", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A3: Sensitive Data Exposure", "references": ["https://golang.org/pkg/net/http/#ListenAndServeTLS"], "shortlink": "https://sg.run/dKbY", "source": "https://semgrep.dev/r/go.lang.security.audit.net.use-tls.use-tls", "technology": ["go"]}, "metavars": {"$ADDR": {"abstract_content": "addr", "end": {"col": 41, "line": 86, "offset": 2746}, "start": {"col": 37, "line": 86, "offset": 2742}, "unique_id": {"sid": 12, "type": "id"}}, "$HANDLER": {"abstract_content": "m", "end": {"col": 44, "line": 86, "offset": 2749}, "start": {"col": 43, "line": 86, "offset": 2748}, "unique_id": {"md5sum": "3ed38b1f93d24b0e76e171faf2e3ff27", "type": "AST"}}}, "severity": "WARNING"}, "path": "frameworks/martini/martini.go", "start": {"col": 17, "line": 86, "offset": 2722}}, {"check_id": "go.lang.security.audit.net.formatted-template-string.formatted-template-string", "end": {"col": 28, "line": 123, "offset": 3513}, "extra": {"is_ignored": false, "lines": "\ttext = \"<link href=\\\"\" + text + \"\\\" rel=\\\"stylesheet\\\" />\"\n\n\treturn template.HTML(text)", "message": "Found a formatted template string passed to 'template.HTML()'.  'template.HTML()' does not escape contents.  Be absolutely sure there is no user-controlled data in this template.  If user data can reach this template, you may have a XSS vulnerability.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A1: Injection", "references": ["https://golang.org/pkg/html/template/#HTML"], "shortlink": "https://sg.run/weE0", "source": "https://semgrep.dev/r/go.lang.security.audit.net.formatted-template-string.formatted-template-string", "technology": ["go"]}, "metavars": {"$T": {"abstract_content": "text", "end": {"col": 6, "line": 121, "offset": 3430}, "start": {"col": 2, "line": 121, "offset": 3426}, "unique_id": {"sid": 28, "type": "id"}}, "$X": {"abstract_content": "\"<link href=\\\"\"+text", "end": {"col": 31, "line": 121, "offset": 3455}, "start": {"col": 9, "line": 121, "offset": 3433}, "unique_id": {"md5sum": "f41562e45ee0a05e642358cefbf2becd", "type": "AST"}}, "$Y": {"abstract_content": "\"\\\" rel=\\\"stylesheet\\\" />\"", "end": {"col": 60, "line": 121, "offset": 3484}, "start": {"col": 34, "line": 121, "offset": 3458}, "unique_id": {"md5sum": "6c721ad381a5e437e5b5d3dc28011dd6", "type": "AST"}}}, "severity": "WARNING"}, "path": "frameworks/beego/adapter/templatefunc.go", "start": {"col": 2, "line": 121, "offset": 3426}}, {"check_id": "go.lang.security.audit.net.formatted-template-string.formatted-template-string", "end": {"col": 73, "line": 173, "offset": 4273}, "extra": {"is_ignored": false, "lines": "\treturn template.HTML(fmt.Sprintf(`<input type=\"hidden\" name=\"%s\" value=\"%s\">`+\n\t\t`<a class=\"captcha\" href=\"javascript:\">`+\n\t\t`<img onclick=\"this.src=('%s%s.png?reload='+(new Date()).getTime())\" class=\"captcha-img\" src=\"%s%s.png\">`+\n\t\t`</a>`, c.FieldIDName, value, c.URLPrefix, value, c.URLPrefix, value))", "message": "Found a formatted template string passed to 'template.HTML()'.  'template.HTML()' does not escape contents.  Be absolutely sure there is no user-controlled data in this template.  If user data can reach this template, you may have a XSS vulnerability.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A1: Injection", "references": ["https://golang.org/pkg/html/template/#HTML"], "shortlink": "https://sg.run/weE0", "source": "https://semgrep.dev/r/go.lang.security.audit.net.formatted-template-string.formatted-template-string", "technology": ["go"]}, "metavars": {"$P": {"abstract_content": "Sprintf", "end": {"col": 34, "line": 170, "offset": 4001}, "start": {"col": 27, "line": 170, "offset": 3994}, "unique_id": {"md5sum": "03949388aa23df27745ace1e6285352a", "type": "AST"}}}, "severity": "WARNING"}, "path": "frameworks/beego/server/web/captcha/captcha.go", "start": {"col": 9, "line": 170, "offset": 3976}}, {"check_id": "go.lang.security.audit.net.formatted-template-string.formatted-template-string", "end": {"col": 28, "line": 254, "offset": 7215}, "extra": {"is_ignored": false, "lines": "\ttext = \"<script src=\\\"\" + text + \"\\\"></script>\"\n\n\treturn template.HTML(text)", "message": "Found a formatted template string passed to 'template.HTML()'.  'template.HTML()' does not escape contents.  Be absolutely sure there is no user-controlled data in this template.  If user data can reach this template, you may have a XSS vulnerability.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A1: Injection", "references": ["https://golang.org/pkg/html/template/#HTML"], "shortlink": "https://sg.run/weE0", "source": "https://semgrep.dev/r/go.lang.security.audit.net.formatted-template-string.formatted-template-string", "technology": ["go"]}, "metavars": {"$T": {"abstract_content": "text", "end": {"col": 6, "line": 252, "offset": 7143}, "start": {"col": 2, "line": 252, "offset": 7139}, "unique_id": {"sid": 29, "type": "id"}}, "$X": {"abstract_content": "\"<script src=\\\"\"+text", "end": {"col": 32, "line": 252, "offset": 7169}, "start": {"col": 9, "line": 252, "offset": 7146}, "unique_id": {"md5sum": "486ac964d4a92298ea7e69ccd869ddd5", "type": "AST"}}, "$Y": {"abstract_content": "\"\\\"></script>\"", "end": {"col": 49, "line": 252, "offset": 7186}, "start": {"col": 35, "line": 252, "offset": 7172}, "unique_id": {"md5sum": "44818c2b2dd98d8772c4ff749e6d1ec1", "type": "AST"}}}, "severity": "WARNING"}, "path": "frameworks/beego/server/web/templatefunc.go", "start": {"col": 2, "line": 252, "offset": 7139}}, {"check_id": "go.lang.security.audit.net.formatted-template-string.formatted-template-string", "end": {"col": 28, "line": 261, "offset": 7409}, "extra": {"is_ignored": false, "lines": "\ttext = \"<link href=\\\"\" + text + \"\\\" rel=\\\"stylesheet\\\" />\"\n\n\treturn template.HTML(text)", "message": "Found a formatted template string passed to 'template.HTML()'.  'template.HTML()' does not escape contents.  Be absolutely sure there is no user-controlled data in this template.  If user data can reach this template, you may have a XSS vulnerability.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A1: Injection", "references": ["https://golang.org/pkg/html/template/#HTML"], "shortlink": "https://sg.run/weE0", "source": "https://semgrep.dev/r/go.lang.security.audit.net.formatted-template-string.formatted-template-string", "technology": ["go"]}, "metavars": {"$T": {"abstract_content": "text", "end": {"col": 6, "line": 259, "offset": 7326}, "start": {"col": 2, "line": 259, "offset": 7322}, "unique_id": {"sid": 30, "type": "id"}}, "$X": {"abstract_content": "\"<link href=\\\"\"+text", "end": {"col": 31, "line": 259, "offset": 7351}, "start": {"col": 9, "line": 259, "offset": 7329}, "unique_id": {"md5sum": "4b5df354e77c83f897d7f0e8ce759e3e", "type": "AST"}}, "$Y": {"abstract_content": "\"\\\" rel=\\\"stylesheet\\\" />\"", "end": {"col": 60, "line": 259, "offset": 7380}, "start": {"col": 34, "line": 259, "offset": 7354}, "unique_id": {"md5sum": "6c721ad381a5e437e5b5d3dc28011dd6", "type": "AST"}}}, "severity": "WARNING"}, "path": "frameworks/beego/server/web/templatefunc.go", "start": {"col": 2, "line": 259, "offset": 7322}}, {"check_id": "trailofbits.go.string-to-int-signedness-cast.string-to-int-signedness-cast", "end": {"col": 30, "line": 65, "offset": 1512}, "extra": {"is_ignored": false, "lines": "\t\ti, err := strconv.Atoi(l)\n\t\tif err != nil {\n\t\t\tcontinue\n\t\t}\n\t\tret = append(ret, int32(i))", "message": "Downcasting of 64-bit integer", "metadata": {"license": "CC-BY-NC-SA-4.0", "shortlink": "https://sg.run/65WB", "source": "https://semgrep.dev/r/trailofbits.go.string-to-int-signedness-cast.string-to-int-signedness-cast"}, "metavars": {"$X": {"abstract_content": "i", "end": {"col": 4, "line": 61, "offset": 1424}, "start": {"col": 3, "line": 61, "offset": 1423}, "unique_id": {"md5sum": "05ba5efee7c8da39905bccc45d296efe", "type": "AST"}}}, "severity": "ERROR"}, "path": "frameworks/fiber/internal/gopsutil/common/common_unix.go", "start": {"col": 3, "line": 61, "offset": 1423}}, {"check_id": "trailofbits.go.string-to-int-signedness-cast.string-to-int-signedness-cast", "end": {"col": 20, "line": 149, "offset": 3587}, "extra": {"is_ignored": false, "lines": "\t\t\tt, err := strconv.ParseInt(value, 10, 64)\n\t\t\tif err != nil {\n\t\t\t\treturn ret, err\n\t\t\t}\n\t\t\tc.CPU = int32(t)", "message": "Downcasting of 64-bit integer", "metadata": {"license": "CC-BY-NC-SA-4.0", "shortlink": "https://sg.run/65WB", "source": "https://semgrep.dev/r/trailofbits.go.string-to-int-signedness-cast.string-to-int-signedness-cast"}, "metavars": {"$X": {"abstract_content": "t", "end": {"col": 5, "line": 145, "offset": 3483}, "start": {"col": 4, "line": 145, "offset": 3482}, "unique_id": {"md5sum": "78d15b2e7d8e4605965c6394738d35a5", "type": "AST"}}}, "severity": "ERROR"}, "path": "frameworks/fiber/internal/gopsutil/cpu/cpu_linux.go", "start": {"col": 4, "line": 145, "offset": 3482}}, {"check_id": "trailofbits.go.string-to-int-signedness-cast.string-to-int-signedness-cast", "end": {"col": 25, "line": 175, "offset": 4176}, "extra": {"is_ignored": false, "lines": "\t\t\tt, err := strconv.ParseInt(val, 10, 64)\n\t\t\tif err != nil {\n\t\t\t\treturn ret, err\n\t\t\t}\n\t\t\tc.Stepping = int32(t)", "message": "Downcasting of 64-bit integer", "metadata": {"license": "CC-BY-NC-SA-4.0", "shortlink": "https://sg.run/65WB", "source": "https://semgrep.dev/r/trailofbits.go.string-to-int-signedness-cast.string-to-int-signedness-cast"}, "metavars": {"$X": {"abstract_content": "t", "end": {"col": 5, "line": 171, "offset": 4069}, "start": {"col": 4, "line": 171, "offset": 4068}, "unique_id": {"md5sum": "78d15b2e7d8e4605965c6394738d35a5", "type": "AST"}}}, "severity": "ERROR"}, "path": "frameworks/fiber/internal/gopsutil/cpu/cpu_linux.go", "start": {"col": 4, "line": 171, "offset": 4068}}, {"check_id": "trailofbits.go.string-to-int-signedness-cast.string-to-int-signedness-cast", "end": {"col": 26, "line": 186, "offset": 4541}, "extra": {"is_ignored": false, "lines": "\t\t\tt, err := strconv.ParseInt(strings.Replace(value, \" KB\", \"\", 1), 10, 64)\n\t\t\tif err != nil {\n\t\t\t\treturn ret, err\n\t\t\t}\n\t\t\tc.CacheSize = int32(t)", "message": "Downcasting of 64-bit integer", "metadata": {"license": "CC-BY-NC-SA-4.0", "shortlink": "https://sg.run/65WB", "source": "https://semgrep.dev/r/trailofbits.go.string-to-int-signedness-cast.string-to-int-signedness-cast"}, "metavars": {"$X": {"abstract_content": "t", "end": {"col": 5, "line": 182, "offset": 4400}, "start": {"col": 4, "line": 182, "offset": 4399}, "unique_id": {"md5sum": "78d15b2e7d8e4605965c6394738d35a5", "type": "AST"}}}, "severity": "ERROR"}, "path": "frameworks/fiber/internal/gopsutil/cpu/cpu_linux.go", "start": {"col": 4, "line": 182, "offset": 4399}}, {"check_id": "trailofbits.go.string-to-int-signedness-cast.string-to-int-signedness-cast", "end": {"col": 50, "line": 212, "offset": 5209}, "extra": {"is_ignored": false, "lines": "\t\tlport, err := strconv.Atoi(port)\n\t\tif err != nil {\n\t\t\treturn Addr{}, err\n\t\t}\n\t\treturn Addr{IP: host, Port: uint32(lport)}, nil", "message": "Downcasting of 64-bit integer", "metadata": {"license": "CC-BY-NC-SA-4.0", "shortlink": "https://sg.run/65WB", "source": "https://semgrep.dev/r/trailofbits.go.string-to-int-signedness-cast.string-to-int-signedness-cast"}, "metavars": {"$X": {"abstract_content": "lport", "end": {"col": 8, "line": 208, "offset": 5088}, "start": {"col": 3, "line": 208, "offset": 5083}, "unique_id": {"md5sum": "aa138ac57b2e2d0be6be04561d4f1475", "type": "AST"}}}, "severity": "ERROR"}, "path": "frameworks/fiber/internal/gopsutil/net/net_aix.go", "start": {"col": 3, "line": 208, "offset": 5083}}, {"check_id": "trailofbits.go.string-to-int-signedness-cast.string-to-int-signedness-cast", "end": {"col": 4, "line": 578, "offset": 15494}, "extra": {"is_ignored": false, "lines": "\t\tfd, err := strconv.Atoi(fd.Name())\n\t\tif err != nil {\n\t\t\tcontinue\n\t\t}\n\n\t\ti := inodeMap{\n\t\t\tpid: pid,\n\t\t\tfd:  uint32(fd),\n\t\t}", "message": "Downcasting of 64-bit integer", "metadata": {"license": "CC-BY-NC-SA-4.0", "shortlink": "https://sg.run/65WB", "source": "https://semgrep.dev/r/trailofbits.go.string-to-int-signedness-cast.string-to-int-signedness-cast"}, "metavars": {"$X": {"abstract_content": "fd", "end": {"col": 5, "line": 570, "offset": 15373}, "start": {"col": 3, "line": 570, "offset": 15371}, "unique_id": {"sid": 158, "type": "id"}}}, "severity": "ERROR"}, "path": "frameworks/fiber/internal/gopsutil/net/net_linux.go", "start": {"col": 3, "line": 570, "offset": 15371}}, {"check_id": "trailofbits.go.string-to-int-signedness-cast.string-to-int-signedness-cast", "end": {"col": 4, "line": 869, "offset": 22129}, "extra": {"is_ignored": false, "lines": "\t\tst, err := strconv.Atoi(tokens[4])\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\n\t\tinode := tokens[6]\n\n\t\tvar pairs []inodeMap\n\t\tpairs, exists := inodes[inode]\n\t\tif !exists {\n\t\t\tpairs = []inodeMap{\n\t\t\t\t{},\n\t\t\t}\n\t\t}\n\t\tfor _, pair := range pairs {\n\t\t\tif filterPid > 0 && filterPid != pair.pid {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tvar path string\n\t\t\tif len(tokens) == 8 {\n\t\t\t\tpath = tokens[len(tokens)-1]\n\t\t\t}\n\t\t\tret = append(ret, connTmp{\n\t\t\t\tfd:       pair.fd,\n\t\t\t\tfamily:   kind.family,\n\t\t\t\tsockType: uint32(st),\n\t\t\t\tladdr: Addr{\n\t\t\t\t\tIP: path,\n\t\t\t\t},\n\t\t\t\tpid:    pair.pid,\n\t\t\t\tstatus: \"NONE\",\n\t\t\t\tpath:   path,\n\t\t\t})\n\t\t}", "message": "Downcasting of 64-bit integer", "metadata": {"license": "CC-BY-NC-SA-4.0", "shortlink": "https://sg.run/65WB", "source": "https://semgrep.dev/r/trailofbits.go.string-to-int-signedness-cast.string-to-int-signedness-cast"}, "metavars": {"$X": {"abstract_content": "st", "end": {"col": 5, "line": 836, "offset": 21529}, "start": {"col": 3, "line": 836, "offset": 21527}, "unique_id": {"md5sum": "f7f505cfde9f8406122c1b320ed177c1", "type": "AST"}}}, "severity": "ERROR"}, "path": "frameworks/fiber/internal/gopsutil/net/net_linux.go", "start": {"col": 3, "line": 836, "offset": 21527}}, {"check_id": "trailofbits.go.string-to-int-signedness-cast.string-to-int-signedness-cast", "end": {"col": 50, "line": 246, "offset": 5820}, "extra": {"is_ignored": false, "lines": "\t\tlport, err := strconv.Atoi(port)\n\t\tif err != nil {\n\t\t\treturn Addr{}, err\n\t\t}\n\t\treturn Addr{IP: host, Port: uint32(lport)}, nil", "message": "Downcasting of 64-bit integer", "metadata": {"license": "CC-BY-NC-SA-4.0", "shortlink": "https://sg.run/65WB", "source": "https://semgrep.dev/r/trailofbits.go.string-to-int-signedness-cast.string-to-int-signedness-cast"}, "metavars": {"$X": {"abstract_content": "lport", "end": {"col": 8, "line": 242, "offset": 5699}, "start": {"col": 3, "line": 242, "offset": 5694}, "unique_id": {"md5sum": "aa138ac57b2e2d0be6be04561d4f1475", "type": "AST"}}}, "severity": "ERROR"}, "path": "frameworks/fiber/internal/gopsutil/net/net_openbsd.go", "start": {"col": 3, "line": 242, "offset": 5694}}, {"check_id": "trailofbits.go.string-to-int-signedness-cast.string-to-int-signedness-cast", "end": {"col": 3, "line": 147, "offset": 3312}, "extra": {"is_ignored": false, "lines": "\tpid, err := strconv.Atoi(f[1])\n\tif err != nil {\n\t\treturn ConnectionStat{}, err\n\t}\n\tfd, err := strconv.Atoi(strings.Trim(f[3], \"u\"))\n\tif err != nil {\n\t\treturn ConnectionStat{}, fmt.Errorf(\"unknown fd, %s\", f[3])\n\t}\n\tnetFamily, ok := constMap[f[4]]\n\tif !ok {\n\t\treturn ConnectionStat{}, fmt.Errorf(\"unknown family, %s\", f[4])\n\t}\n\tnetType, ok := constMap[f[7]]\n\tif !ok {\n\t\treturn ConnectionStat{}, fmt.Errorf(\"unknown type, %s\", f[7])\n\t}\n\n\tvar laddr, raddr Addr\n\tif f[7] == \"unix\" {\n\t\tladdr.IP = f[8]\n\t} else {\n\t\tladdr, raddr, err = parseNetAddr(f[8])\n\t\tif err != nil {\n\t\t\treturn ConnectionStat{}, fmt.Errorf(\"failed to parse netaddr, %s\", f[8])\n\t\t}\n\t}\n\n\tn := ConnectionStat{\n\t\tFd:     uint32(fd),\n\t\tFamily: uint32(netFamily),\n\t\tType:   uint32(netType),\n\t\tLaddr:  laddr,\n\t\tRaddr:  raddr,\n\t\tPid:    int32(pid),\n\t}", "message": "Downcasting of 64-bit integer", "metadata": {"license": "CC-BY-NC-SA-4.0", "shortlink": "https://sg.run/65WB", "source": "https://semgrep.dev/r/trailofbits.go.string-to-int-signedness-cast.string-to-int-signedness-cast"}, "metavars": {"$X": {"abstract_content": "pid", "end": {"col": 5, "line": 113, "offset": 2507}, "start": {"col": 2, "line": 113, "offset": 2504}, "unique_id": {"md5sum": "d70d8486d04485d58f9a6f82e0402a70", "type": "AST"}}}, "severity": "ERROR"}, "path": "frameworks/fiber/internal/gopsutil/net/net_unix.go", "start": {"col": 2, "line": 113, "offset": 2504}}, {"check_id": "trailofbits.go.string-to-int-signedness-cast.string-to-int-signedness-cast", "end": {"col": 3, "line": 147, "offset": 3312}, "extra": {"is_ignored": false, "lines": "\tfd, err := strconv.Atoi(strings.Trim(f[3], \"u\"))\n\tif err != nil {\n\t\treturn ConnectionStat{}, fmt.Errorf(\"unknown fd, %s\", f[3])\n\t}\n\tnetFamily, ok := constMap[f[4]]\n\tif !ok {\n\t\treturn ConnectionStat{}, fmt.Errorf(\"unknown family, %s\", f[4])\n\t}\n\tnetType, ok := constMap[f[7]]\n\tif !ok {\n\t\treturn ConnectionStat{}, fmt.Errorf(\"unknown type, %s\", f[7])\n\t}\n\n\tvar laddr, raddr Addr\n\tif f[7] == \"unix\" {\n\t\tladdr.IP = f[8]\n\t} else {\n\t\tladdr, raddr, err = parseNetAddr(f[8])\n\t\tif err != nil {\n\t\t\treturn ConnectionStat{}, fmt.Errorf(\"failed to parse netaddr, %s\", f[8])\n\t\t}\n\t}\n\n\tn := ConnectionStat{\n\t\tFd:     uint32(fd),\n\t\tFamily: uint32(netFamily),\n\t\tType:   uint32(netType),\n\t\tLaddr:  laddr,\n\t\tRaddr:  raddr,\n\t\tPid:    int32(pid),\n\t}", "message": "Downcasting of 64-bit integer", "metadata": {"license": "CC-BY-NC-SA-4.0", "shortlink": "https://sg.run/65WB", "source": "https://semgrep.dev/r/trailofbits.go.string-to-int-signedness-cast.string-to-int-signedness-cast"}, "metavars": {"$X": {"abstract_content": "fd", "end": {"col": 4, "line": 117, "offset": 2589}, "start": {"col": 2, "line": 117, "offset": 2587}, "unique_id": {"md5sum": "017f51277cbd6db6bbeaf0725fe06de7", "type": "AST"}}}, "severity": "ERROR"}, "path": "frameworks/fiber/internal/gopsutil/net/net_unix.go", "start": {"col": 2, "line": 117, "offset": 2587}}, {"check_id": "trailofbits.go.string-to-int-signedness-cast.string-to-int-signedness-cast", "end": {"col": 50, "line": 165, "offset": 3744}, "extra": {"is_ignored": false, "lines": "\t\tlport, err := strconv.Atoi(port)\n\t\tif err != nil {\n\t\t\treturn Addr{}, err\n\t\t}\n\t\treturn Addr{IP: host, Port: uint32(lport)}, nil", "message": "Downcasting of 64-bit integer", "metadata": {"license": "CC-BY-NC-SA-4.0", "shortlink": "https://sg.run/65WB", "source": "https://semgrep.dev/r/trailofbits.go.string-to-int-signedness-cast.string-to-int-signedness-cast"}, "metavars": {"$X": {"abstract_content": "lport", "end": {"col": 8, "line": 161, "offset": 3623}, "start": {"col": 3, "line": 161, "offset": 3618}, "unique_id": {"md5sum": "aa138ac57b2e2d0be6be04561d4f1475", "type": "AST"}}}, "severity": "ERROR"}, "path": "frameworks/fiber/internal/gopsutil/net/net_unix.go", "start": {"col": 3, "line": 161, "offset": 3618}}, {"check_id": "trailofbits.go.string-to-int-signedness-cast.string-to-int-signedness-cast", "end": {"col": 30, "line": 62, "offset": 1195}, "extra": {"is_ignored": false, "lines": "\t\tv, err := strconv.Atoi(pid[0])\n\t\tif err != nil {\n\t\t\treturn ret, err\n\t\t}\n\t\tret = append(ret, int32(v))", "message": "Downcasting of 64-bit integer", "metadata": {"license": "CC-BY-NC-SA-4.0", "shortlink": "https://sg.run/65WB", "source": "https://semgrep.dev/r/trailofbits.go.string-to-int-signedness-cast.string-to-int-signedness-cast"}, "metavars": {"$X": {"abstract_content": "v", "end": {"col": 4, "line": 58, "offset": 1095}, "start": {"col": 3, "line": 58, "offset": 1094}, "unique_id": {"md5sum": "a7a1aefc0cd60e432f0d6d5ea8e8f991", "type": "AST"}}}, "severity": "ERROR"}, "path": "frameworks/fiber/internal/gopsutil/process/process_darwin.go", "start": {"col": 3, "line": 58, "offset": 1094}}, {"check_id": "trailofbits.go.string-to-int-signedness-cast.string-to-int-signedness-cast", "end": {"col": 22, "line": 83, "offset": 1569}, "extra": {"is_ignored": false, "lines": "\tv, err := strconv.Atoi(r[0][0])\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\n\treturn int32(v), err", "message": "Downcasting of 64-bit integer", "metadata": {"license": "CC-BY-NC-SA-4.0", "shortlink": "https://sg.run/65WB", "source": "https://semgrep.dev/r/trailofbits.go.string-to-int-signedness-cast.string-to-int-signedness-cast"}, "metavars": {"$X": {"abstract_content": "v", "end": {"col": 3, "line": 78, "offset": 1480}, "start": {"col": 2, "line": 78, "offset": 1479}, "unique_id": {"md5sum": "a7a1aefc0cd60e432f0d6d5ea8e8f991", "type": "AST"}}}, "severity": "ERROR"}, "path": "frameworks/fiber/internal/gopsutil/process/process_darwin.go", "start": {"col": 2, "line": 78, "offset": 1479}}, {"check_id": "trailofbits.go.string-to-int-signedness-cast.string-to-int-signedness-cast", "end": {"col": 30, "line": 206, "offset": 5161}, "extra": {"is_ignored": false, "lines": "\t\tv, err := strconv.Atoi(strings.Replace(l, \"R\", \"\", 1))\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\treturn NewProcess(int32(v))", "message": "Downcasting of 64-bit integer", "metadata": {"license": "CC-BY-NC-SA-4.0", "shortlink": "https://sg.run/65WB", "source": "https://semgrep.dev/r/trailofbits.go.string-to-int-signedness-cast.string-to-int-signedness-cast"}, "metavars": {"$X": {"abstract_content": "v", "end": {"col": 4, "line": 202, "offset": 5037}, "start": {"col": 3, "line": 202, "offset": 5036}, "unique_id": {"md5sum": "a7a1aefc0cd60e432f0d6d5ea8e8f991", "type": "AST"}}}, "severity": "ERROR"}, "path": "frameworks/fiber/internal/gopsutil/process/process_darwin.go", "start": {"col": 3, "line": 202, "offset": 5036}}, {"check_id": "trailofbits.go.string-to-int-signedness-cast.string-to-int-signedness-cast", "end": {"col": 3, "line": 486, "offset": 12288}, "extra": {"is_ignored": false, "lines": "\trss, err := strconv.Atoi(r[0][0])\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tvms, err := strconv.Atoi(r[0][1])\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tpagein, err := strconv.Atoi(r[0][2])\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tret := &MemoryInfoStat{\n\t\tRSS:  uint64(rss) * 1024,\n\t\tVMS:  uint64(vms) * 1024,\n\t\tSwap: uint64(pagein),\n\t}", "message": "Downcasting of 64-bit integer", "metadata": {"license": "CC-BY-NC-SA-4.0", "shortlink": "https://sg.run/65WB", "source": "https://semgrep.dev/r/trailofbits.go.string-to-int-signedness-cast.string-to-int-signedness-cast"}, "metavars": {"$X": {"abstract_content": "rss", "end": {"col": 5, "line": 469, "offset": 11962}, "start": {"col": 2, "line": 469, "offset": 11959}, "unique_id": {"md5sum": "f176f9251d87c6f97bdf2fb383c0118a", "type": "AST"}}}, "severity": "ERROR"}, "path": "frameworks/fiber/internal/gopsutil/process/process_darwin.go", "start": {"col": 2, "line": 469, "offset": 11959}}, {"check_id": "trailofbits.go.string-to-int-signedness-cast.string-to-int-signedness-cast", "end": {"col": 3, "line": 486, "offset": 12288}, "extra": {"is_ignored": false, "lines": "\tvms, err := strconv.Atoi(r[0][1])\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tpagein, err := strconv.Atoi(r[0][2])\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tret := &MemoryInfoStat{\n\t\tRSS:  uint64(rss) * 1024,\n\t\tVMS:  uint64(vms) * 1024,\n\t\tSwap: uint64(pagein),\n\t}", "message": "Downcasting of 64-bit integer", "metadata": {"license": "CC-BY-NC-SA-4.0", "shortlink": "https://sg.run/65WB", "source": "https://semgrep.dev/r/trailofbits.go.string-to-int-signedness-cast.string-to-int-signedness-cast"}, "metavars": {"$X": {"abstract_content": "vms", "end": {"col": 5, "line": 473, "offset": 12035}, "start": {"col": 2, "line": 473, "offset": 12032}, "unique_id": {"md5sum": "122a964b1616ddfb16f568cd00074adb", "type": "AST"}}}, "severity": "ERROR"}, "path": "frameworks/fiber/internal/gopsutil/process/process_darwin.go", "start": {"col": 2, "line": 473, "offset": 12032}}, {"check_id": "trailofbits.go.string-to-int-signedness-cast.string-to-int-signedness-cast", "end": {"col": 3, "line": 486, "offset": 12288}, "extra": {"is_ignored": false, "lines": "\tpagein, err := strconv.Atoi(r[0][2])\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tret := &MemoryInfoStat{\n\t\tRSS:  uint64(rss) * 1024,\n\t\tVMS:  uint64(vms) * 1024,\n\t\tSwap: uint64(pagein),\n\t}", "message": "Downcasting of 64-bit integer", "metadata": {"license": "CC-BY-NC-SA-4.0", "shortlink": "https://sg.run/65WB", "source": "https://semgrep.dev/r/trailofbits.go.string-to-int-signedness-cast.string-to-int-signedness-cast"}, "metavars": {"$X": {"abstract_content": "pagein", "end": {"col": 8, "line": 477, "offset": 12111}, "start": {"col": 2, "line": 477, "offset": 12105}, "unique_id": {"md5sum": "7ca767ef097520463dc2bccffc23487e", "type": "AST"}}}, "severity": "ERROR"}, "path": "frameworks/fiber/internal/gopsutil/process/process_darwin.go", "start": {"col": 2, "line": 477, "offset": 12105}}, {"check_id": "go.lang.best-practice.hidden-goroutine.hidden-goroutine", "end": {"col": 2, "line": 553, "offset": 13209}, "extra": {"is_ignored": false, "lines": "func (s *stmtDecorator) destroy() {\n\tgo func() {\n\t\ts.wg.Wait()\n\t\t_ = s.stmt.Close()\n\t}()\n}", "message": "Detected a hidden goroutine. Function invocations are expected to synchronous, and this function will execute asynchronously because all it does is call a goroutine. Instead, remove the internal goroutine and call the function using 'go'.", "metadata": {"category": "best-practice", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/DopW", "source": "https://semgrep.dev/r/go.lang.best-practice.hidden-goroutine.hidden-goroutine", "technology": ["go"]}, "metavars": {"$FUNC": {"abstract_content": "destroy", "end": {"col": 32, "line": 548, "offset": 13150}, "start": {"col": 25, "line": 548, "offset": 13143}, "unique_id": {"md5sum": "8a04f587fdcbab7b64ac2f8873eaebb8", "type": "AST"}}}, "severity": "WARNING"}, "path": "frameworks/beego/client/orm/db_alias.go", "start": {"col": 1, "line": 548, "offset": 13119}}, {"check_id": "go.lang.best-practice.hidden-goroutine.hidden-goroutine", "end": {"col": 2, "line": 589, "offset": 14394}, "extra": {"is_ignored": false, "lines": "func (m *taskManager) StopTask() {\n\tgo func() {\n\t\tm.stop <- true\n\t}()\n}", "message": "Detected a hidden goroutine. Function invocations are expected to synchronous, and this function will execute asynchronously because all it does is call a goroutine. Instead, remove the internal goroutine and call the function using 'go'.", "metadata": {"category": "best-practice", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "shortlink": "https://sg.run/DopW", "source": "https://semgrep.dev/r/go.lang.best-practice.hidden-goroutine.hidden-goroutine", "technology": ["go"]}, "metavars": {"$FUNC": {"abstract_content": "StopTask", "end": {"col": 31, "line": 585, "offset": 14353}, "start": {"col": 23, "line": 585, "offset": 14345}, "unique_id": {"md5sum": "49669892ad16f5fdc1415d22a1aec520", "type": "AST"}}}, "severity": "WARNING"}, "path": "frameworks/beego/task/task.go", "start": {"col": 1, "line": 585, "offset": 14323}}, {"check_id": "dgryski.semgrep-go.hostport.sprintf-host-port", "end": {"col": 82, "line": 89, "offset": 2580}, "extra": {"is_ignored": false, "lines": "\t\taddr = fmt.Sprintf(\"%s:%d\", BConfig.Listen.AdminAddr, BConfig.Listen.AdminPort)", "message": "use net.JoinHostPort instead of fmt.Sprintf($XX, addr)\n", "metadata": {"license": "MIT", "shortlink": "https://sg.run/DoN2", "source": "https://semgrep.dev/r/dgryski.semgrep-go.hostport.sprintf-host-port"}, "metavars": {"$NET": {"abstract_content": "addr", "end": {"col": 7, "line": 89, "offset": 2505}, "start": {"col": 3, "line": 89, "offset": 2501}, "unique_id": {"sid": 12, "type": "id"}}}, "severity": "ERROR"}, "path": "frameworks/beego/server/web/admin.go", "start": {"col": 3, "line": 89, "offset": 2501}}, {"check_id": "dgryski.semgrep-go.hostport.sprintf-host-port", "end": {"col": 82, "line": 89, "offset": 2580}, "extra": {"is_ignored": false, "lines": "\t\taddr = fmt.Sprintf(\"%s:%d\", BConfig.Listen.AdminAddr, BConfig.Listen.AdminPort)", "message": "use net.JoinHostPort instead of fmt.Sprintf(BConfig.Listen.AdminPort, BConfig.Listen.AdminAddr)\n", "metadata": {"license": "MIT", "shortlink": "https://sg.run/DoN2", "source": "https://semgrep.dev/r/dgryski.semgrep-go.hostport.sprintf-host-port"}, "metavars": {"$NET": {"abstract_content": "BConfig.Listen.AdminAddr", "end": {"col": 55, "line": 89, "offset": 2553}, "start": {"col": 31, "line": 89, "offset": 2529}, "unique_id": {"md5sum": "6205530f1952a1587bc67a71a821a3e4", "type": "AST"}}, "$XX": {"abstract_content": "BConfig.Listen.AdminPort", "end": {"col": 81, "line": 89, "offset": 2579}, "start": {"col": 57, "line": 89, "offset": 2555}, "unique_id": {"md5sum": "c58a97ebd857efb5a216b5b2ab8d17ac", "type": "AST"}}}, "severity": "ERROR"}, "path": "frameworks/beego/server/web/admin.go", "start": {"col": 10, "line": 89, "offset": 2508}}, {"check_id": "dgryski.semgrep-go.hostport.sprintf-host-port", "end": {"col": 82, "line": 89, "offset": 2580}, "extra": {"is_ignored": false, "lines": "\t\taddr = fmt.Sprintf(\"%s:%d\", BConfig.Listen.AdminAddr, BConfig.Listen.AdminPort)", "message": "use net.JoinHostPort instead of fmt.Sprintf(BConfig.Listen.AdminAddr, BConfig.Listen.AdminPort)\n", "metadata": {"license": "MIT", "shortlink": "https://sg.run/DoN2", "source": "https://semgrep.dev/r/dgryski.semgrep-go.hostport.sprintf-host-port"}, "metavars": {"$NET": {"abstract_content": "BConfig.Listen.AdminPort", "end": {"col": 81, "line": 89, "offset": 2579}, "start": {"col": 57, "line": 89, "offset": 2555}, "unique_id": {"md5sum": "c58a97ebd857efb5a216b5b2ab8d17ac", "type": "AST"}}, "$XX": {"abstract_content": "BConfig.Listen.AdminAddr", "end": {"col": 55, "line": 89, "offset": 2553}, "start": {"col": 31, "line": 89, "offset": 2529}, "unique_id": {"md5sum": "6205530f1952a1587bc67a71a821a3e4", "type": "AST"}}}, "severity": "ERROR"}, "path": "frameworks/beego/server/web/admin.go", "start": {"col": 10, "line": 89, "offset": 2508}}, {"check_id": "dgryski.semgrep-go.hostport.sprintf-host-port", "end": {"col": 80, "line": 90, "offset": 2349}, "extra": {"is_ignored": false, "lines": "\t\taddr = fmt.Sprintf(\"%s:%d\", app.Cfg.Listen.HTTPAddr, app.Cfg.Listen.HTTPPort)", "message": "use net.JoinHostPort instead of fmt.Sprintf($XX, addr)\n", "metadata": {"license": "MIT", "shortlink": "https://sg.run/DoN2", "source": "https://semgrep.dev/r/dgryski.semgrep-go.hostport.sprintf-host-port"}, "metavars": {"$NET": {"abstract_content": "addr", "end": {"col": 7, "line": 90, "offset": 2276}, "start": {"col": 3, "line": 90, "offset": 2272}, "unique_id": {"sid": 9, "type": "id"}}}, "severity": "ERROR"}, "path": "frameworks/beego/server/web/server.go", "start": {"col": 3, "line": 90, "offset": 2272}}, {"check_id": "dgryski.semgrep-go.hostport.sprintf-host-port", "end": {"col": 80, "line": 90, "offset": 2349}, "extra": {"is_ignored": false, "lines": "\t\taddr = fmt.Sprintf(\"%s:%d\", app.Cfg.Listen.HTTPAddr, app.Cfg.Listen.HTTPPort)", "message": "use net.JoinHostPort instead of fmt.Sprintf(app.Cfg.Listen.HTTPPort, app.Cfg.Listen.HTTPAddr)\n", "metadata": {"license": "MIT", "shortlink": "https://sg.run/DoN2", "source": "https://semgrep.dev/r/dgryski.semgrep-go.hostport.sprintf-host-port"}, "metavars": {"$NET": {"abstract_content": "app.Cfg.Listen.HTTPAddr", "end": {"col": 54, "line": 90, "offset": 2323}, "start": {"col": 31, "line": 90, "offset": 2300}, "unique_id": {"md5sum": "509eed9ae7b3409066dce32a26bc6934", "type": "AST"}}, "$XX": {"abstract_content": "app.Cfg.Listen.HTTPPort", "end": {"col": 79, "line": 90, "offset": 2348}, "start": {"col": 56, "line": 90, "offset": 2325}, "unique_id": {"md5sum": "13140011658c160ff2419737f19b6a4c", "type": "AST"}}}, "severity": "ERROR"}, "path": "frameworks/beego/server/web/server.go", "start": {"col": 10, "line": 90, "offset": 2279}}, {"check_id": "dgryski.semgrep-go.hostport.sprintf-host-port", "end": {"col": 80, "line": 90, "offset": 2349}, "extra": {"is_ignored": false, "lines": "\t\taddr = fmt.Sprintf(\"%s:%d\", app.Cfg.Listen.HTTPAddr, app.Cfg.Listen.HTTPPort)", "message": "use net.JoinHostPort instead of fmt.Sprintf(app.Cfg.Listen.HTTPAddr, app.Cfg.Listen.HTTPPort)\n", "metadata": {"license": "MIT", "shortlink": "https://sg.run/DoN2", "source": "https://semgrep.dev/r/dgryski.semgrep-go.hostport.sprintf-host-port"}, "metavars": {"$NET": {"abstract_content": "app.Cfg.Listen.HTTPPort", "end": {"col": 79, "line": 90, "offset": 2348}, "start": {"col": 56, "line": 90, "offset": 2325}, "unique_id": {"md5sum": "13140011658c160ff2419737f19b6a4c", "type": "AST"}}, "$XX": {"abstract_content": "app.Cfg.Listen.HTTPAddr", "end": {"col": 54, "line": 90, "offset": 2323}, "start": {"col": 31, "line": 90, "offset": 2300}, "unique_id": {"md5sum": "509eed9ae7b3409066dce32a26bc6934", "type": "AST"}}}, "severity": "ERROR"}, "path": "frameworks/beego/server/web/server.go", "start": {"col": 10, "line": 90, "offset": 2279}}, {"check_id": "dgryski.semgrep-go.hostport.sprintf-host-port", "end": {"col": 90, "line": 146, "offset": 3874}, "extra": {"is_ignored": false, "lines": "\t\t\t\t\thttpsAddr = fmt.Sprintf(\"%s:%d\", app.Cfg.Listen.HTTPSAddr, app.Cfg.Listen.HTTPSPort)", "message": "use net.JoinHostPort instead of fmt.Sprintf($XX, httpsAddr)\n", "metadata": {"license": "MIT", "shortlink": "https://sg.run/DoN2", "source": "https://semgrep.dev/r/dgryski.semgrep-go.hostport.sprintf-host-port"}, "metavars": {"$NET": {"abstract_content": "httpsAddr", "end": {"col": 15, "line": 146, "offset": 3799}, "start": {"col": 6, "line": 146, "offset": 3790}, "unique_id": {"sid": 14, "type": "id"}}}, "severity": "ERROR"}, "path": "frameworks/beego/server/web/server.go", "start": {"col": 6, "line": 146, "offset": 3790}}, {"check_id": "dgryski.semgrep-go.hostport.sprintf-host-port", "end": {"col": 90, "line": 146, "offset": 3874}, "extra": {"is_ignored": false, "lines": "\t\t\t\t\thttpsAddr = fmt.Sprintf(\"%s:%d\", app.Cfg.Listen.HTTPSAddr, app.Cfg.Listen.HTTPSPort)", "message": "use net.JoinHostPort instead of fmt.Sprintf(app.Cfg.Listen.HTTPSPort, app.Cfg.Listen.HTTPSAddr)\n", "metadata": {"license": "MIT", "shortlink": "https://sg.run/DoN2", "source": "https://semgrep.dev/r/dgryski.semgrep-go.hostport.sprintf-host-port"}, "metavars": {"$NET": {"abstract_content": "app.Cfg.Listen.HTTPSAddr", "end": {"col": 63, "line": 146, "offset": 3847}, "start": {"col": 39, "line": 146, "offset": 3823}, "unique_id": {"md5sum": "d6803228ec61ff5e38f081b5c5c87743", "type": "AST"}}, "$XX": {"abstract_content": "app.Cfg.Listen.HTTPSPort", "end": {"col": 89, "line": 146, "offset": 3873}, "start": {"col": 65, "line": 146, "offset": 3849}, "unique_id": {"md5sum": "110e7f7b6dc5649184db6a6ce14e492e", "type": "AST"}}}, "severity": "ERROR"}, "path": "frameworks/beego/server/web/server.go", "start": {"col": 18, "line": 146, "offset": 3802}}, {"check_id": "dgryski.semgrep-go.hostport.sprintf-host-port", "end": {"col": 90, "line": 146, "offset": 3874}, "extra": {"is_ignored": false, "lines": "\t\t\t\t\thttpsAddr = fmt.Sprintf(\"%s:%d\", app.Cfg.Listen.HTTPSAddr, app.Cfg.Listen.HTTPSPort)", "message": "use net.JoinHostPort instead of fmt.Sprintf(app.Cfg.Listen.HTTPSAddr, app.Cfg.Listen.HTTPSPort)\n", "metadata": {"license": "MIT", "shortlink": "https://sg.run/DoN2", "source": "https://semgrep.dev/r/dgryski.semgrep-go.hostport.sprintf-host-port"}, "metavars": {"$NET": {"abstract_content": "app.Cfg.Listen.HTTPSPort", "end": {"col": 89, "line": 146, "offset": 3873}, "start": {"col": 65, "line": 146, "offset": 3849}, "unique_id": {"md5sum": "110e7f7b6dc5649184db6a6ce14e492e", "type": "AST"}}, "$XX": {"abstract_content": "app.Cfg.Listen.HTTPSAddr", "end": {"col": 63, "line": 146, "offset": 3847}, "start": {"col": 39, "line": 146, "offset": 3823}, "unique_id": {"md5sum": "d6803228ec61ff5e38f081b5c5c87743", "type": "AST"}}}, "severity": "ERROR"}, "path": "frameworks/beego/server/web/server.go", "start": {"col": 18, "line": 146, "offset": 3802}}, {"check_id": "dgryski.semgrep-go.hostport.sprintf-host-port", "end": {"col": 95, "line": 201, "offset": 5906}, "extra": {"is_ignored": false, "lines": "\t\t\t\tapp.Server.Addr = fmt.Sprintf(\"%s:%d\", app.Cfg.Listen.HTTPSAddr, app.Cfg.Listen.HTTPSPort)", "message": "use net.JoinHostPort instead of fmt.Sprintf($XX, app.Server.Addr)\n", "metadata": {"license": "MIT", "shortlink": "https://sg.run/DoN2", "source": "https://semgrep.dev/r/dgryski.semgrep-go.hostport.sprintf-host-port"}, "metavars": {"$NET": {"abstract_content": "app.Server.Addr", "end": {"col": 20, "line": 201, "offset": 5831}, "start": {"col": 5, "line": 201, "offset": 5816}, "unique_id": {"md5sum": "e3da36e3373ccd8d7c0666580541e911", "type": "AST"}}}, "severity": "ERROR"}, "path": "frameworks/beego/server/web/server.go", "start": {"col": 5, "line": 201, "offset": 5816}}, {"check_id": "dgryski.semgrep-go.hostport.sprintf-host-port", "end": {"col": 95, "line": 201, "offset": 5906}, "extra": {"is_ignored": false, "lines": "\t\t\t\tapp.Server.Addr = fmt.Sprintf(\"%s:%d\", app.Cfg.Listen.HTTPSAddr, app.Cfg.Listen.HTTPSPort)", "message": "use net.JoinHostPort instead of fmt.Sprintf(app.Cfg.Listen.HTTPSPort, app.Cfg.Listen.HTTPSAddr)\n", "metadata": {"license": "MIT", "shortlink": "https://sg.run/DoN2", "source": "https://semgrep.dev/r/dgryski.semgrep-go.hostport.sprintf-host-port"}, "metavars": {"$NET": {"abstract_content": "app.Cfg.Listen.HTTPSAddr", "end": {"col": 68, "line": 201, "offset": 5879}, "start": {"col": 44, "line": 201, "offset": 5855}, "unique_id": {"md5sum": "d6803228ec61ff5e38f081b5c5c87743", "type": "AST"}}, "$XX": {"abstract_content": "app.Cfg.Listen.HTTPSPort", "end": {"col": 94, "line": 201, "offset": 5905}, "start": {"col": 70, "line": 201, "offset": 5881}, "unique_id": {"md5sum": "110e7f7b6dc5649184db6a6ce14e492e", "type": "AST"}}}, "severity": "ERROR"}, "path": "frameworks/beego/server/web/server.go", "start": {"col": 23, "line": 201, "offset": 5834}}, {"check_id": "dgryski.semgrep-go.hostport.sprintf-host-port", "end": {"col": 95, "line": 201, "offset": 5906}, "extra": {"is_ignored": false, "lines": "\t\t\t\tapp.Server.Addr = fmt.Sprintf(\"%s:%d\", app.Cfg.Listen.HTTPSAddr, app.Cfg.Listen.HTTPSPort)", "message": "use net.JoinHostPort instead of fmt.Sprintf(app.Cfg.Listen.HTTPSAddr, app.Cfg.Listen.HTTPSPort)\n", "metadata": {"license": "MIT", "shortlink": "https://sg.run/DoN2", "source": "https://semgrep.dev/r/dgryski.semgrep-go.hostport.sprintf-host-port"}, "metavars": {"$NET": {"abstract_content": "app.Cfg.Listen.HTTPSPort", "end": {"col": 94, "line": 201, "offset": 5905}, "start": {"col": 70, "line": 201, "offset": 5881}, "unique_id": {"md5sum": "110e7f7b6dc5649184db6a6ce14e492e", "type": "AST"}}, "$XX": {"abstract_content": "app.Cfg.Listen.HTTPSAddr", "end": {"col": 68, "line": 201, "offset": 5879}, "start": {"col": 44, "line": 201, "offset": 5855}, "unique_id": {"md5sum": "d6803228ec61ff5e38f081b5c5c87743", "type": "AST"}}}, "severity": "ERROR"}, "path": "frameworks/beego/server/web/server.go", "start": {"col": 23, "line": 201, "offset": 5834}}, {"check_id": "dgryski.semgrep-go.hostport.sprintf-host-port", "end": {"col": 41, "line": 190, "offset": 5217}, "extra": {"is_ignored": false, "lines": "\treturn fmt.Sprintf(\"%s:%d\", host, port)", "message": "use net.JoinHostPort instead of fmt.Sprintf(port, host)\n", "metadata": {"license": "MIT", "shortlink": "https://sg.run/DoN2", "source": "https://semgrep.dev/r/dgryski.semgrep-go.hostport.sprintf-host-port"}, "metavars": {"$NET": {"abstract_content": "host", "end": {"col": 34, "line": 190, "offset": 5210}, "start": {"col": 30, "line": 190, "offset": 5206}, "unique_id": {"sid": 27, "type": "id"}}, "$XX": {"abstract_content": "port", "end": {"col": 40, "line": 190, "offset": 5216}, "start": {"col": 36, "line": 190, "offset": 5212}, "unique_id": {"sid": 28, "type": "id"}}}, "severity": "ERROR"}, "path": "frameworks/buffalo/mail/internal/mail/smtp.go", "start": {"col": 9, "line": 190, "offset": 5185}}, {"check_id": "dgryski.semgrep-go.hostport.sprintf-host-port", "end": {"col": 41, "line": 190, "offset": 5217}, "extra": {"is_ignored": false, "lines": "\treturn fmt.Sprintf(\"%s:%d\", host, port)", "message": "use net.JoinHostPort instead of fmt.Sprintf(host, port)\n", "metadata": {"license": "MIT", "shortlink": "https://sg.run/DoN2", "source": "https://semgrep.dev/r/dgryski.semgrep-go.hostport.sprintf-host-port"}, "metavars": {"$NET": {"abstract_content": "port", "end": {"col": 40, "line": 190, "offset": 5216}, "start": {"col": 36, "line": 190, "offset": 5212}, "unique_id": {"sid": 28, "type": "id"}}, "$XX": {"abstract_content": "host", "end": {"col": 34, "line": 190, "offset": 5210}, "start": {"col": 30, "line": 190, "offset": 5206}, "unique_id": {"sid": 27, "type": "id"}}}, "severity": "ERROR"}, "path": "frameworks/buffalo/mail/internal/mail/smtp.go", "start": {"col": 9, "line": 190, "offset": 5185}}, {"check_id": "dgryski.semgrep-go.hostport.sprintf-host-port", "end": {"col": 97, "line": 100, "offset": 3531}, "extra": {"is_ignored": false, "lines": "\t\topts.Addr = defaults.String(opts.Addr, fmt.Sprintf(\"%s:%s\", envAddr, envy.Get(\"PORT\", \"3000\")))", "message": "use net.JoinHostPort instead of fmt.Sprintf(envy.Get(\"PORT\", \"3000\"), envAddr)\n", "metadata": {"license": "MIT", "shortlink": "https://sg.run/DoN2", "source": "https://semgrep.dev/r/dgryski.semgrep-go.hostport.sprintf-host-port"}, "metavars": {"$NET": {"abstract_content": "envAddr", "end": {"col": 70, "line": 100, "offset": 3504}, "start": {"col": 63, "line": 100, "offset": 3497}, "unique_id": {"sid": 21, "type": "id"}}, "$XX": {"abstract_content": "envy.Get(\"PORT\"\"3000\")", "end": {"col": 96, "line": 100, "offset": 3530}, "start": {"col": 72, "line": 100, "offset": 3506}, "unique_id": {"md5sum": "deb3a91340b8f3662bb4cee76e562bc4", "type": "AST"}}}, "severity": "ERROR"}, "path": "frameworks/buffalo/options.go", "start": {"col": 42, "line": 100, "offset": 3476}}, {"check_id": "dgryski.semgrep-go.hostport.sprintf-host-port", "end": {"col": 97, "line": 100, "offset": 3531}, "extra": {"is_ignored": false, "lines": "\t\topts.Addr = defaults.String(opts.Addr, fmt.Sprintf(\"%s:%s\", envAddr, envy.Get(\"PORT\", \"3000\")))", "message": "use net.JoinHostPort instead of fmt.Sprintf(envAddr, envy.Get(\"PORT\", \"3000\"))\n", "metadata": {"license": "MIT", "shortlink": "https://sg.run/DoN2", "source": "https://semgrep.dev/r/dgryski.semgrep-go.hostport.sprintf-host-port"}, "metavars": {"$NET": {"abstract_content": "envy.Get(\"PORT\"\"3000\")", "end": {"col": 96, "line": 100, "offset": 3530}, "start": {"col": 72, "line": 100, "offset": 3506}, "unique_id": {"md5sum": "deb3a91340b8f3662bb4cee76e562bc4", "type": "AST"}}, "$XX": {"abstract_content": "envAddr", "end": {"col": 70, "line": 100, "offset": 3504}, "start": {"col": 63, "line": 100, "offset": 3497}, "unique_id": {"sid": 21, "type": "id"}}}, "severity": "ERROR"}, "path": "frameworks/buffalo/options.go", "start": {"col": 42, "line": 100, "offset": 3476}}, {"check_id": "go.lang.security.audit.unsafe-reflect-by-name.unsafe-reflect-by-name", "end": {"col": 72, "line": 104, "offset": 3493}, "extra": {"is_ignored": false, "lines": "\t\tpkField := reflect.Indirect(reflect.ValueOf(ins)).FieldByName(pkName)", "message": "If an attacker can supply values that the application then uses to determine which method or field to invoke, the potential exists for the attacker to create control flow paths through the application that were not intended by the application developers. This attack vector may allow the attacker to bypass authentication or access control checks or otherwise cause the application to behave in an unexpected manner.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": "CWE-470: Use of Externally-Controlled Input to Select Classes or Code ('Unsafe Reflection')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A1: Injection", "shortlink": "https://sg.run/R8Xv", "source": "https://semgrep.dev/r/go.lang.security.audit.unsafe-reflect-by-name.unsafe-reflect-by-name", "technology": ["go"]}, "metavars": {"$NAME": {"abstract_content": "pkName", "end": {"col": 71, "line": 104, "offset": 3492}, "start": {"col": 65, "line": 104, "offset": 3486}, "unique_id": {"sid": 25, "type": "id"}}, "$SMTH": {"abstract_content": "reflect.Indirect(reflect.ValueOf(ins))", "end": {"col": 52, "line": 104, "offset": 3473}, "start": {"col": 14, "line": 104, "offset": 3435}, "unique_id": {"md5sum": "86244f7435beb65a4d616ae95c2fc479", "type": "AST"}}}, "severity": "WARNING"}, "path": "frameworks/beego/client/orm/filter/bean/default_value_filter.go", "start": {"col": 14, "line": 104, "offset": 3435}}, {"check_id": "go.lang.security.audit.unsafe-reflect-by-name.unsafe-reflect-by-name", "end": {"col": 46, "line": 840, "offset": 18514}, "extra": {"is_ignored": false, "lines": "\t\t\tif id := ind.FieldByName(camelString(key)); id.IsValid() {", "message": "If an attacker can supply values that the application then uses to determine which method or field to invoke, the potential exists for the attacker to create control flow paths through the application that were not intended by the application developers. This attack vector may allow the attacker to bypass authentication or access control checks or otherwise cause the application to behave in an unexpected manner.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": "CWE-470: Use of Externally-Controlled Input to Select Classes or Code ('Unsafe Reflection')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A1: Injection", "shortlink": "https://sg.run/R8Xv", "source": "https://semgrep.dev/r/go.lang.security.audit.unsafe-reflect-by-name.unsafe-reflect-by-name", "technology": ["go"]}, "metavars": {"$NAME": {"abstract_content": "camelString(key)", "end": {"col": 45, "line": 840, "offset": 18513}, "start": {"col": 29, "line": 840, "offset": 18497}, "unique_id": {"md5sum": "83bb368e9c60d2f158e225ed5e90f0cc", "type": "AST"}}, "$SMTH": {"abstract_content": "ind", "end": {"col": 16, "line": 840, "offset": 18484}, "start": {"col": 13, "line": 840, "offset": 18481}, "unique_id": {"sid": 162, "type": "id"}}}, "severity": "WARNING"}, "path": "frameworks/beego/client/orm/orm_raw.go", "start": {"col": 13, "line": 840, "offset": 18481}}, {"check_id": "go.lang.security.audit.unsafe-reflect-by-name.unsafe-reflect-by-name", "end": {"col": 41, "line": 27, "offset": 616}, "extra": {"is_ignored": false, "lines": "\t\tpvv := pv.Elem().FieldByName(ptt.Name)", "message": "If an attacker can supply values that the application then uses to determine which method or field to invoke, the potential exists for the attacker to create control flow paths through the application that were not intended by the application developers. This attack vector may allow the attacker to bypass authentication or access control checks or otherwise cause the application to behave in an unexpected manner.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": "CWE-470: Use of Externally-Controlled Input to Select Classes or Code ('Unsafe Reflection')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A1: Injection", "shortlink": "https://sg.run/R8Xv", "source": "https://semgrep.dev/r/go.lang.security.audit.unsafe-reflect-by-name.unsafe-reflect-by-name", "technology": ["go"]}, "metavars": {"$NAME": {"abstract_content": "ptt.Name", "end": {"col": 40, "line": 27, "offset": 615}, "start": {"col": 32, "line": 27, "offset": 607}, "unique_id": {"md5sum": "7222b7291bf1ae44522b3a5724e56c24", "type": "AST"}}, "$SMTH": {"abstract_content": "pv.Elem()", "end": {"col": 19, "line": 27, "offset": 594}, "start": {"col": 10, "line": 27, "offset": 585}, "unique_id": {"md5sum": "a6cc4bb50b2a2c867d1d8c502da56af5", "type": "AST"}}}, "severity": "WARNING"}, "path": "frameworks/beego/core/bean/mock.go", "start": {"col": 10, "line": 27, "offset": 585}}, {"check_id": "go.lang.security.audit.unsafe-reflect-by-name.unsafe-reflect-by-name", "end": {"col": 30, "line": 75, "offset": 2444}, "extra": {"is_ignored": false, "lines": "\t\tfValue := v.FieldByName(fn)", "message": "If an attacker can supply values that the application then uses to determine which method or field to invoke, the potential exists for the attacker to create control flow paths through the application that were not intended by the application developers. This attack vector may allow the attacker to bypass authentication or access control checks or otherwise cause the application to behave in an unexpected manner.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": "CWE-470: Use of Externally-Controlled Input to Select Classes or Code ('Unsafe Reflection')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A1: Injection", "shortlink": "https://sg.run/R8Xv", "source": "https://semgrep.dev/r/go.lang.security.audit.unsafe-reflect-by-name.unsafe-reflect-by-name", "technology": ["go"]}, "metavars": {"$NAME": {"abstract_content": "fn", "end": {"col": 29, "line": 75, "offset": 2443}, "start": {"col": 27, "line": 75, "offset": 2441}, "unique_id": {"sid": 10, "type": "id"}}, "$SMTH": {"abstract_content": "v", "end": {"col": 14, "line": 75, "offset": 2428}, "start": {"col": 13, "line": 75, "offset": 2427}, "unique_id": {"sid": 8, "type": "id"}}}, "severity": "WARNING"}, "path": "frameworks/beego/core/bean/tag_auto_wire_bean_factory.go", "start": {"col": 13, "line": 75, "offset": 2427}}, {"check_id": "go.lang.security.audit.unsafe-reflect-by-name.unsafe-reflect-by-name", "end": {"col": 47, "line": 652, "offset": 18729}, "extra": {"is_ignored": false, "lines": "\t\t\tfieldValue := result.FieldByName(fieldName)", "message": "If an attacker can supply values that the application then uses to determine which method or field to invoke, the potential exists for the attacker to create control flow paths through the application that were not intended by the application developers. This attack vector may allow the attacker to bypass authentication or access control checks or otherwise cause the application to behave in an unexpected manner.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": "CWE-470: Use of Externally-Controlled Input to Select Classes or Code ('Unsafe Reflection')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A1: Injection", "shortlink": "https://sg.run/R8Xv", "source": "https://semgrep.dev/r/go.lang.security.audit.unsafe-reflect-by-name.unsafe-reflect-by-name", "technology": ["go"]}, "metavars": {"$NAME": {"abstract_content": "fieldName", "end": {"col": 46, "line": 652, "offset": 18728}, "start": {"col": 37, "line": 652, "offset": 18719}, "unique_id": {"sid": 99, "type": "id"}}, "$SMTH": {"abstract_content": "result", "end": {"col": 24, "line": 652, "offset": 18706}, "start": {"col": 18, "line": 652, "offset": 18700}, "unique_id": {"sid": 95, "type": "id"}}}, "severity": "WARNING"}, "path": "frameworks/beego/server/web/context/input.go", "start": {"col": 18, "line": 652, "offset": 18700}}, {"check_id": "go.lang.security.audit.unsafe-reflect-by-name.unsafe-reflect-by-name", "end": {"col": 40, "line": 476, "offset": 12640}, "extra": {"is_ignored": false, "lines": "\t\tmethod := vc.MethodByName(err.method)", "message": "If an attacker can supply values that the application then uses to determine which method or field to invoke, the potential exists for the attacker to create control flow paths through the application that were not intended by the application developers. This attack vector may allow the attacker to bypass authentication or access control checks or otherwise cause the application to behave in an unexpected manner.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": "CWE-470: Use of Externally-Controlled Input to Select Classes or Code ('Unsafe Reflection')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A1: Injection", "shortlink": "https://sg.run/R8Xv", "source": "https://semgrep.dev/r/go.lang.security.audit.unsafe-reflect-by-name.unsafe-reflect-by-name", "technology": ["go"]}, "metavars": {"$NAME": {"abstract_content": "err.method", "end": {"col": 39, "line": 476, "offset": 12639}, "start": {"col": 29, "line": 476, "offset": 12629}, "unique_id": {"md5sum": "087f83be257a2dc0bb58ad33cc6e5f49", "type": "AST"}}, "$SMTH": {"abstract_content": "vc", "end": {"col": 15, "line": 476, "offset": 12615}, "start": {"col": 13, "line": 476, "offset": 12613}, "unique_id": {"sid": 65, "type": "id"}}}, "severity": "WARNING"}, "path": "frameworks/beego/server/web/error.go", "start": {"col": 13, "line": 476, "offset": 12613}}, {"check_id": "go.lang.security.audit.unsafe-reflect-by-name.unsafe-reflect-by-name", "end": {"col": 47, "line": 242, "offset": 6597}, "extra": {"is_ignored": false, "lines": "\t\t\tif val := reflectVal.MethodByName(colon[1]); val.IsValid() {", "message": "If an attacker can supply values that the application then uses to determine which method or field to invoke, the potential exists for the attacker to create control flow paths through the application that were not intended by the application developers. This attack vector may allow the attacker to bypass authentication or access control checks or otherwise cause the application to behave in an unexpected manner.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": "CWE-470: Use of Externally-Controlled Input to Select Classes or Code ('Unsafe Reflection')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A1: Injection", "shortlink": "https://sg.run/R8Xv", "source": "https://semgrep.dev/r/go.lang.security.audit.unsafe-reflect-by-name.unsafe-reflect-by-name", "technology": ["go"]}, "metavars": {"$NAME": {"abstract_content": "colon[1]", "end": {"col": 46, "line": 242, "offset": 6596}, "start": {"col": 38, "line": 242, "offset": 6588}, "unique_id": {"md5sum": "bf8de7c88bbdbea2b5ba37bc8ee625af", "type": "AST"}}, "$SMTH": {"abstract_content": "reflectVal", "end": {"col": 24, "line": 242, "offset": 6574}, "start": {"col": 14, "line": 242, "offset": 6564}, "unique_id": {"sid": 60, "type": "id"}}}, "severity": "WARNING"}, "path": "frameworks/beego/server/web/router.go", "start": {"col": 14, "line": 242, "offset": 6564}}, {"check_id": "go.lang.security.audit.unsafe-reflect-by-name.unsafe-reflect-by-name", "end": {"col": 53, "line": 290, "offset": 7943}, "extra": {"is_ignored": false, "lines": "\t\t\telemField := execElem.FieldByName(fieldType.Name)", "message": "If an attacker can supply values that the application then uses to determine which method or field to invoke, the potential exists for the attacker to create control flow paths through the application that were not intended by the application developers. This attack vector may allow the attacker to bypass authentication or access control checks or otherwise cause the application to behave in an unexpected manner.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": "CWE-470: Use of Externally-Controlled Input to Select Classes or Code ('Unsafe Reflection')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A1: Injection", "shortlink": "https://sg.run/R8Xv", "source": "https://semgrep.dev/r/go.lang.security.audit.unsafe-reflect-by-name.unsafe-reflect-by-name", "technology": ["go"]}, "metavars": {"$NAME": {"abstract_content": "fieldType.Name", "end": {"col": 52, "line": 290, "offset": 7942}, "start": {"col": 38, "line": 290, "offset": 7928}, "unique_id": {"md5sum": "2e1002585f92affd2fb477f212392400", "type": "AST"}}, "$SMTH": {"abstract_content": "execElem", "end": {"col": 25, "line": 290, "offset": 7915}, "start": {"col": 17, "line": 290, "offset": 7907}, "unique_id": {"sid": 84, "type": "id"}}}, "severity": "WARNING"}, "path": "frameworks/beego/server/web/router.go", "start": {"col": 17, "line": 290, "offset": 7907}}, {"check_id": "go.lang.security.audit.unsafe-reflect-by-name.unsafe-reflect-by-name", "end": {"col": 50, "line": 600, "offset": 17179}, "extra": {"is_ignored": false, "lines": "\t_, exists := controllerType.MethodByName(method)", "message": "If an attacker can supply values that the application then uses to determine which method or field to invoke, the potential exists for the attacker to create control flow paths through the application that were not intended by the application developers. This attack vector may allow the attacker to bypass authentication or access control checks or otherwise cause the application to behave in an unexpected manner.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": "CWE-470: Use of Externally-Controlled Input to Select Classes or Code ('Unsafe Reflection')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A1: Injection", "shortlink": "https://sg.run/R8Xv", "source": "https://semgrep.dev/r/go.lang.security.audit.unsafe-reflect-by-name.unsafe-reflect-by-name", "technology": ["go"]}, "metavars": {"$NAME": {"abstract_content": "method", "end": {"col": 49, "line": 600, "offset": 17178}, "start": {"col": 43, "line": 600, "offset": 17172}, "unique_id": {"md5sum": "21d7c4828bdba8d96e901b88326e8776", "type": "AST"}}, "$SMTH": {"abstract_content": "controllerType", "end": {"col": 29, "line": 600, "offset": 17158}, "start": {"col": 15, "line": 600, "offset": 17144}, "unique_id": {"sid": 24, "type": "id"}}}, "severity": "WARNING"}, "path": "frameworks/beego/server/web/router.go", "start": {"col": 15, "line": 600, "offset": 17144}}, {"check_id": "go.lang.security.audit.unsafe-reflect-by-name.unsafe-reflect-by-name", "end": {"col": 42, "line": 1198, "offset": 34314}, "extra": {"is_ignored": false, "lines": "\t\t\t\t\tmethod := vc.MethodByName(runMethod)", "message": "If an attacker can supply values that the application then uses to determine which method or field to invoke, the potential exists for the attacker to create control flow paths through the application that were not intended by the application developers. This attack vector may allow the attacker to bypass authentication or access control checks or otherwise cause the application to behave in an unexpected manner.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": "CWE-470: Use of Externally-Controlled Input to Select Classes or Code ('Unsafe Reflection')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A1: Injection", "shortlink": "https://sg.run/R8Xv", "source": "https://semgrep.dev/r/go.lang.security.audit.unsafe-reflect-by-name.unsafe-reflect-by-name", "technology": ["go"]}, "metavars": {"$NAME": {"abstract_content": "runMethod", "end": {"col": 41, "line": 1198, "offset": 34313}, "start": {"col": 32, "line": 1198, "offset": 34304}, "unique_id": {"sid": 257, "type": "id"}}, "$SMTH": {"abstract_content": "vc", "end": {"col": 18, "line": 1198, "offset": 34290}, "start": {"col": 16, "line": 1198, "offset": 34288}, "unique_id": {"sid": 272, "type": "id"}}}, "severity": "WARNING"}, "path": "frameworks/beego/server/web/router.go", "start": {"col": 16, "line": 1198, "offset": 34288}}, {"check_id": "go.lang.security.audit.unsafe-reflect-by-name.unsafe-reflect-by-name", "end": {"col": 26, "line": 42, "offset": 914}, "extra": {"is_ignored": false, "lines": "\t\t\tf := ri.FieldByName(n)", "message": "If an attacker can supply values that the application then uses to determine which method or field to invoke, the potential exists for the attacker to create control flow paths through the application that were not intended by the application developers. This attack vector may allow the attacker to bypass authentication or access control checks or otherwise cause the application to behave in an unexpected manner.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": "CWE-470: Use of Externally-Controlled Input to Select Classes or Code ('Unsafe Reflection')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A1: Injection", "shortlink": "https://sg.run/R8Xv", "source": "https://semgrep.dev/r/go.lang.security.audit.unsafe-reflect-by-name.unsafe-reflect-by-name", "technology": ["go"]}, "metavars": {"$NAME": {"abstract_content": "n", "end": {"col": 25, "line": 42, "offset": 913}, "start": {"col": 24, "line": 42, "offset": 912}, "unique_id": {"sid": 9, "type": "id"}}, "$SMTH": {"abstract_content": "ri", "end": {"col": 11, "line": 42, "offset": 899}, "start": {"col": 9, "line": 42, "offset": 897}, "unique_id": {"sid": 7, "type": "id"}}}, "severity": "WARNING"}, "path": "frameworks/buffalo/binding/file_request_type_binder.go", "start": {"col": 9, "line": 42, "offset": 897}}, {"check_id": "go.lang.security.audit.unsafe-reflect-by-name.unsafe-reflect-by-name", "end": {"col": 31, "line": 95, "offset": 2180}, "extra": {"is_ignored": false, "lines": "\t\trm := rv.MethodByName(found)", "message": "If an attacker can supply values that the application then uses to determine which method or field to invoke, the potential exists for the attacker to create control flow paths through the application that were not intended by the application developers. This attack vector may allow the attacker to bypass authentication or access control checks or otherwise cause the application to behave in an unexpected manner.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": "CWE-470: Use of Externally-Controlled Input to Select Classes or Code ('Unsafe Reflection')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A1: Injection", "shortlink": "https://sg.run/R8Xv", "source": "https://semgrep.dev/r/go.lang.security.audit.unsafe-reflect-by-name.unsafe-reflect-by-name", "technology": ["go"]}, "metavars": {"$NAME": {"abstract_content": "found", "end": {"col": 30, "line": 95, "offset": 2179}, "start": {"col": 25, "line": 95, "offset": 2174}, "unique_id": {"sid": 44, "type": "id"}}, "$SMTH": {"abstract_content": "rv", "end": {"col": 11, "line": 95, "offset": 2160}, "start": {"col": 9, "line": 95, "offset": 2158}, "unique_id": {"sid": 47, "type": "id"}}}, "severity": "WARNING"}, "path": "frameworks/fiber/internal/go-ole/oleutil/connection.go", "start": {"col": 9, "line": 95, "offset": 2158}}, {"check_id": "go.lang.security.audit.unsafe-reflect-by-name.unsafe-reflect-by-name", "end": {"col": 26, "line": 215, "offset": 6589}, "extra": {"is_ignored": false, "lines": "\t\tv = v.FieldByName(name)", "message": "If an attacker can supply values that the application then uses to determine which method or field to invoke, the potential exists for the attacker to create control flow paths through the application that were not intended by the application developers. This attack vector may allow the attacker to bypass authentication or access control checks or otherwise cause the application to behave in an unexpected manner.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": "CWE-470: Use of Externally-Controlled Input to Select Classes or Code ('Unsafe Reflection')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A1: Injection", "shortlink": "https://sg.run/R8Xv", "source": "https://semgrep.dev/r/go.lang.security.audit.unsafe-reflect-by-name.unsafe-reflect-by-name", "technology": ["go"]}, "metavars": {"$NAME": {"abstract_content": "name", "end": {"col": 25, "line": 215, "offset": 6588}, "start": {"col": 21, "line": 215, "offset": 6584}, "unique_id": {"sid": 65, "type": "id"}}, "$SMTH": {"abstract_content": "v", "end": {"col": 8, "line": 215, "offset": 6571}, "start": {"col": 7, "line": 215, "offset": 6570}, "unique_id": {"sid": 60, "type": "id"}}}, "severity": "WARNING"}, "path": "frameworks/fiber/internal/schema/decoder.go", "start": {"col": 7, "line": 215, "offset": 6570}}, {"check_id": "go.lang.security.audit.unsafe-reflect-by-name.unsafe-reflect-by-name", "end": {"col": 31, "line": 162, "offset": 5179}, "extra": {"is_ignored": false, "lines": "\t\t\tcfg.FieldByName(field.Name).SetString(env)", "message": "If an attacker can supply values that the application then uses to determine which method or field to invoke, the potential exists for the attacker to create control flow paths through the application that were not intended by the application developers. This attack vector may allow the attacker to bypass authentication or access control checks or otherwise cause the application to behave in an unexpected manner.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": "CWE-470: Use of Externally-Controlled Input to Select Classes or Code ('Unsafe Reflection')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A1: Injection", "shortlink": "https://sg.run/R8Xv", "source": "https://semgrep.dev/r/go.lang.security.audit.unsafe-reflect-by-name.unsafe-reflect-by-name", "technology": ["go"]}, "metavars": {"$NAME": {"abstract_content": "field.Name", "end": {"col": 30, "line": 162, "offset": 5178}, "start": {"col": 20, "line": 162, "offset": 5168}, "unique_id": {"md5sum": "da5e1f94983900c1de65ec7d474194c6", "type": "AST"}}, "$SMTH": {"abstract_content": "cfg", "end": {"col": 7, "line": 162, "offset": 5155}, "start": {"col": 4, "line": 162, "offset": 5152}, "unique_id": {"sid": 30, "type": "id"}}}, "severity": "WARNING"}, "path": "frameworks/utron/config/config.go", "start": {"col": 4, "line": 162, "offset": 5152}}, {"check_id": "go.lang.security.audit.unsafe-reflect-by-name.unsafe-reflect-by-name", "end": {"col": 31, "line": 168, "offset": 5376}, "extra": {"is_ignored": false, "lines": "\t\t\tcfg.FieldByName(field.Name).Set(reflect.ValueOf(v))", "message": "If an attacker can supply values that the application then uses to determine which method or field to invoke, the potential exists for the attacker to create control flow paths through the application that were not intended by the application developers. This attack vector may allow the attacker to bypass authentication or access control checks or otherwise cause the application to behave in an unexpected manner.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": "CWE-470: Use of Externally-Controlled Input to Select Classes or Code ('Unsafe Reflection')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A1: Injection", "shortlink": "https://sg.run/R8Xv", "source": "https://semgrep.dev/r/go.lang.security.audit.unsafe-reflect-by-name.unsafe-reflect-by-name", "technology": ["go"]}, "metavars": {"$NAME": {"abstract_content": "field.Name", "end": {"col": 30, "line": 168, "offset": 5375}, "start": {"col": 20, "line": 168, "offset": 5365}, "unique_id": {"md5sum": "da5e1f94983900c1de65ec7d474194c6", "type": "AST"}}, "$SMTH": {"abstract_content": "cfg", "end": {"col": 7, "line": 168, "offset": 5352}, "start": {"col": 4, "line": 168, "offset": 5349}, "unique_id": {"sid": 30, "type": "id"}}}, "severity": "WARNING"}, "path": "frameworks/utron/config/config.go", "start": {"col": 4, "line": 168, "offset": 5349}}, {"check_id": "go.lang.security.audit.unsafe-reflect-by-name.unsafe-reflect-by-name", "end": {"col": 31, "line": 174, "offset": 5588}, "extra": {"is_ignored": false, "lines": "\t\t\tcfg.FieldByName(field.Name).SetBool(b)", "message": "If an attacker can supply values that the application then uses to determine which method or field to invoke, the potential exists for the attacker to create control flow paths through the application that were not intended by the application developers. This attack vector may allow the attacker to bypass authentication or access control checks or otherwise cause the application to behave in an unexpected manner.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": "CWE-470: Use of Externally-Controlled Input to Select Classes or Code ('Unsafe Reflection')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A1: Injection", "shortlink": "https://sg.run/R8Xv", "source": "https://semgrep.dev/r/go.lang.security.audit.unsafe-reflect-by-name.unsafe-reflect-by-name", "technology": ["go"]}, "metavars": {"$NAME": {"abstract_content": "field.Name", "end": {"col": 30, "line": 174, "offset": 5587}, "start": {"col": 20, "line": 174, "offset": 5577}, "unique_id": {"md5sum": "da5e1f94983900c1de65ec7d474194c6", "type": "AST"}}, "$SMTH": {"abstract_content": "cfg", "end": {"col": 7, "line": 174, "offset": 5564}, "start": {"col": 4, "line": 174, "offset": 5561}, "unique_id": {"sid": 30, "type": "id"}}}, "severity": "WARNING"}, "path": "frameworks/utron/config/config.go", "start": {"col": 4, "line": 174, "offset": 5561}}, {"check_id": "go.lang.security.audit.unsafe-reflect-by-name.unsafe-reflect-by-name", "end": {"col": 46, "line": 115, "offset": 2947}, "extra": {"is_ignored": false, "lines": "\t\tif _, bok := bTyp.MethodByName(method.Name); bok {", "message": "If an attacker can supply values that the application then uses to determine which method or field to invoke, the potential exists for the attacker to create control flow paths through the application that were not intended by the application developers. This attack vector may allow the attacker to bypass authentication or access control checks or otherwise cause the application to behave in an unexpected manner.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": "CWE-470: Use of Externally-Controlled Input to Select Classes or Code ('Unsafe Reflection')", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "owasp": "A1: Injection", "shortlink": "https://sg.run/R8Xv", "source": "https://semgrep.dev/r/go.lang.security.audit.unsafe-reflect-by-name.unsafe-reflect-by-name", "technology": ["go"]}, "metavars": {"$NAME": {"abstract_content": "method.Name", "end": {"col": 45, "line": 115, "offset": 2946}, "start": {"col": 34, "line": 115, "offset": 2935}, "unique_id": {"md5sum": "318b6dc56e72afdc9395e7e5832cbb9c", "type": "AST"}}, "$SMTH": {"abstract_content": "bTyp", "end": {"col": 20, "line": 115, "offset": 2921}, "start": {"col": 16, "line": 115, "offset": 2917}, "unique_id": {"sid": 25, "type": "id"}}}, "severity": "WARNING"}, "path": "frameworks/utron/router/routes.go", "start": {"col": 16, "line": 115, "offset": 2917}}]}
